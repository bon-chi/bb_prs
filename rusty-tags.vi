!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
ACCESS_CONTROL_ALLOW_CREDENTIALS_TRUE	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/access_control_allow_credentials.rs	/^const ACCESS_CONTROL_ALLOW_CREDENTIALS_TRUE: UniCase<&'static str> = UniCase("true");$/;"	c
AccessControlAllowCredentials	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/access_control_allow_credentials.rs	/^pub struct AccessControlAllowCredentials;$/;"	s
AccessControlAllowOrigin	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/access_control_allow_origin.rs	/^pub enum AccessControlAllowOrigin {$/;"	g
Animal	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    enum Animal {$/;"	g
ArbitraryType	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^        struct ArbitraryType(u32);$/;"	s
Array	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub type Array = Vec<Json>;$/;"	T
AsJson	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub struct AsJson<'a, T: 'a> { inner: &'a T }$/;"	s
AsPrettyJson	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub struct AsPrettyJson<'a, T: 'a> { inner: &'a T, indent: Option<u32> }$/;"	s
Authorization	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^pub struct Authorization<S: Scheme>(pub S);$/;"	s
BBResponse	/Users/200246/development/Rust/bb_prs/src/main.rs	/^struct BBResponse {$/;"	s
BITBUCKET_API_URL	/Users/200246/development/Rust/bb_prs/src/main.rs	/^const BITBUCKET_API_URL: &'static str = "BITBUCKET_API_URL";$/;"	c
BITBUCKET_PASSWORD	/Users/200246/development/Rust/bb_prs/src/main.rs	/^const BITBUCKET_PASSWORD: &'static str = "BITBUCKET_PASSWORD";$/;"	c
BITBUCKET_USERNAME	/Users/200246/development/Rust/bb_prs/src/main.rs	/^const BITBUCKET_USERNAME: &'static str = "BITBUCKET_USERNAME";$/;"	c
BUF	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    const BUF: &'static str = "                ";$/;"	c
Basic	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^pub struct Basic {$/;"	s
Bearer	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^pub struct Bearer {$/;"	s
Body	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^pub enum Body<'a> {$/;"	g
Body	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^enum Body {$/;"	g
BufReader	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/buffer.rs	/^pub struct BufReader<R> {$/;"	s
Builder	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub struct Builder<T> {$/;"	s
BuilderError	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub type BuilderError = ParserError;$/;"	T
ByteRangeSpec	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/range.rs	/^pub enum ByteRangeSpec {$/;"	g
CHARS	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs	/^static CHARS: &'static[u8] = b"0123456789abcdef";$/;"	c
CLOSE	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/connection.rs	/^const CLOSE: UniCase<&'static str> = UniCase("close");$/;"	c
CR	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^pub const CR: u8 = b'\\r';$/;"	c
CacheControl	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/cache_control.rs	/^pub struct CacheControl(pub Vec<CacheDirective>);$/;"	s
CacheDirective	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/cache_control.rs	/^pub enum CacheDirective {$/;"	g
CharacterSet	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^pub enum CharacterSet {$/;"	g
Charset	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/charset.rs	/^pub enum Charset{$/;"	g
ChatEvent	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^        enum ChatEvent {$/;"	g
Client	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^pub struct Client {$/;"	s
CloneableMockStream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^pub struct CloneableMockStream {$/;"	s
CloneableStream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^pub trait CloneableStream: NetworkStream + Clone {}$/;"	t
Color	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^pub enum Color {$/;"	g
Config	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^pub struct Config {$/;"	s
Config	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^pub struct Config {$/;"	s
ConnAdapter	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^struct ConnAdapter<C: NetworkConnector + Send + Sync>(C);$/;"	s
ConnectionOption	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/connection.rs	/^pub enum ConnectionOption {$/;"	g
Connector	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^struct Connector(Box<NetworkConnector<Stream=Box<NetworkStream + Send>> + Send + Sync>);$/;"	s
ContentDisposition	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_disposition.rs	/^pub struct ContentDisposition {$/;"	s
ContentLength	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_length.rs	/^pub struct ContentLength(pub u64);$/;"	s
ContentRangeSpec	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_range.rs	/^pub enum ContentRangeSpec {$/;"	g
Cookie	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/cookie.rs	/^pub struct Cookie(pub Vec<CookiePair>);$/;"	s
CowStr	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^struct CowStr(Cow<'static, str>);$/;"	s
CrazyLength	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    struct CrazyLength(Option<bool>, usize);$/;"	s
DECODE_TABLE	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^const DECODE_TABLE: [u8; 256] = [$/;"	c
Decodable	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^pub trait Decodable: Sized {$/;"	t
DecodeEnum	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    enum DecodeEnum {$/;"	g
DecodeResult	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub type DecodeResult<T> = Result<T, DecoderError>;$/;"	T
DecodeStruct	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    struct DecodeStruct {$/;"	s
Decoder	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub struct Decoder {$/;"	s
Decoder	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^pub trait Decoder {$/;"	t
DecoderError	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub enum DecoderError {$/;"	g
DecoderHelpers	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^pub trait DecoderHelpers: Decoder {$/;"	t
DefaultConnector	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^pub type DefaultConnector = HttpConnector;$/;"	T
DefaultConnector	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^pub type DefaultConnector = HttpsConnector<self::openssl::Openssl>;$/;"	T
Directive	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/strict_transport_security.rs	/^enum Directive {$/;"	g
DispositionParam	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_disposition.rs	/^pub enum DispositionParam {$/;"	g
DispositionType	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_disposition.rs	/^pub enum DispositionType {$/;"	g
EQUALS_CODE	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^const EQUALS_CODE: u8 = 0xFE;$/;"	c
EXPECT_CONTINUE	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/expect.rs	/^const EXPECT_CONTINUE: UniCase<&'static str> = UniCase("100-continue");$/;"	c
Encodable	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^pub trait Encodable {$/;"	t
EncodeResult	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub type EncodeResult<T> = Result<T, EncoderError>;$/;"	T
Encoder	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub struct Encoder<'a> {$/;"	s
Encoder	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^pub trait Encoder {$/;"	t
EncoderError	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub enum EncoderError {$/;"	g
EncoderHelpers	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^pub trait EncoderHelpers: Encoder {$/;"	t
Encoding	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/encoding.rs	/^pub enum Encoding {$/;"	g
EncodingFormat	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^enum EncodingFormat {$/;"	g
EndError	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^pub struct EndError<W: Write>(io::Error, HttpWriter<W>);$/;"	s
EntityTag	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/entity.rs	/^pub struct EntityTag {$/;"	s
Enum	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^        enum Enum {$/;"	g
Err	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/accept_ranges.rs	/^    type Err = ::Error;$/;"	T
Err	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^	type Err = ::Error;$/;"	T
Err	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^    type Err = ::Error;$/;"	T
Err	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/cache_control.rs	/^    type Err = Option<<u32 as FromStr>::Err>;$/;"	T
Err	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/connection.rs	/^    type Err = ();$/;"	T
Err	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_range.rs	/^    type Err = ::Error;$/;"	T
Err	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/range.rs	/^    type Err = ::Error;$/;"	T
Err	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/strict_transport_security.rs	/^    type Err = ::Error;$/;"	T
Err	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/upgrade.rs	/^    type Err = ();$/;"	T
Err	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/upgrade.rs	/^    type Err =();$/;"	T
Err	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/charset.rs	/^    type Err = ::Error;$/;"	T
Err	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/encoding.rs	/^    type Err = ::Error;$/;"	T
Err	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/entity.rs	/^    type Err = ::Error;$/;"	T
Err	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/httpdate.rs	/^    type Err = ::Error;$/;"	T
Err	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^    type Err = ::Error;$/;"	T
Err	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    type Err = Http2ConnectError;$/;"	T
Err	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/method.rs	/^    type Err = Error;$/;"	T
Err	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/uri.rs	/^    type Err = Error;$/;"	T
Err	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    type Err = ParserError;$/;"	T
Error	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/error.rs	/^pub enum Error {$/;"	g
Error	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    type Error = DecoderError;$/;"	T
Error	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    type Error = EncoderError;$/;"	T
Error	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        type Error = ();$/;"	T
Error	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    type Error;$/;"	T
ErrorCode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub enum ErrorCode {$/;"	g
Event	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^pub enum Event {$/;"	g
EventError	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^pub enum EventError {$/;"	g
EventResult	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^pub type EventResult = Result<Event, EventError>;$/;"	T
Expect	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/expect.rs	/^pub enum Expect {$/;"	g
ExtendedValue	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/parsing.rs	/^pub struct ExtendedValue {$/;"	s
FloatStruct	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    struct FloatStruct {$/;"	s
Foo	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/benches/client.rs	/^struct Foo;$/;"	s
Foo	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^        struct Foo {$/;"	s
Foo	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^        struct Foo<P> {$/;"	s
FormatShim	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^struct FormatShim<'a, 'b: 'a> {$/;"	s
Fresh	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^pub enum Fresh {}$/;"	g
FromBase64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^pub trait FromBase64 {$/;"	t
FromBase64Error	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^pub enum FromBase64Error {$/;"	g
FromHex	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs	/^pub trait FromHex {$/;"	t
FromHexError	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs	/^pub enum FromHexError {$/;"	g
Handler	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^pub trait Handler: Sync + Send {$/;"	t
Header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^pub trait Header: Clone + Any + Send + Sync {$/;"	t
HeaderClone	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^pub trait HeaderClone {$/;"	t
HeaderFormat	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^pub trait HeaderFormat: fmt::Debug + HeaderClone + Any + Typeable + Send + Sync {$/;"	t
HeaderFormatter	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^pub struct HeaderFormatter<'a, H: HeaderFormat>(pub &'a H);$/;"	s
HeaderName	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^type HeaderName = UniCase<CowStr>;$/;"	T
HeaderView	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^pub struct HeaderView<'a>(&'a HeaderName, &'a Item);$/;"	s
Headers	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^pub struct Headers {$/;"	s
HeadersItems	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^pub struct HeadersItems<'a> {$/;"	s
HeadersVisitor	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^        struct HeadersVisitor;$/;"	s
Host	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/host.rs	/^pub struct Host {$/;"	s
Http11Message	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^pub struct Http11Message {$/;"	s
Http11Protocol	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^pub struct Http11Protocol {$/;"	s
Http2ConnectError	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^struct Http2ConnectError(io::Error);$/;"	s
Http2Connector	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^struct Http2Connector<S> where S: CloneableStream {$/;"	s
Http2Message	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^pub struct Http2Message<S> where S: CloneableStream {$/;"	s
Http2Protocol	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^pub struct Http2Protocol<C, S> where C: NetworkConnector<Stream=S> + Send + 'static,$/;"	s
Http2Request	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^struct Http2Request {$/;"	s
Http2Response	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^struct Http2Response {$/;"	s
Http2Stream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^struct Http2Stream<S: CloneableStream>(S);$/;"	s
HttpConnector	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^pub struct HttpConnector;$/;"	s
HttpDate	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/httpdate.rs	/^pub struct HttpDate(pub time::Tm);$/;"	s
HttpListener	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^pub struct HttpListener(TcpListener);$/;"	s
HttpMessage	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/message.rs	/^pub trait HttpMessage: Write + Read + Send + Any + Typeable + Debug {$/;"	t
HttpReader	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^pub enum HttpReader<R> {$/;"	g
HttpStream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^pub struct HttpStream(pub TcpStream);$/;"	s
HttpVersion	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/version.rs	/^pub enum HttpVersion {$/;"	g
HttpWriter	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^pub enum HttpWriter<W: Write> {$/;"	g
HttpsConnector	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^pub struct HttpsConnector<S: Ssl> {$/;"	s
HttpsListener	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^pub struct HttpsListener<S: Ssl> {$/;"	s
HttpsStream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^pub enum HttpsStream<S: NetworkStream> {$/;"	g
INIT_BUFFER_SIZE	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/buffer.rs	/^const INIT_BUFFER_SIZE: usize = 4096;$/;"	c
INVALID_CODE	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^const INVALID_CODE: u8 = 0xFF;$/;"	c
IfRange	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/if_range.rs	/^pub enum IfRange {$/;"	g
Incoming	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^pub struct Incoming<S> {$/;"	s
InitError	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^pub enum InitError {$/;"	g
InitOptions	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^pub struct InitOptions {$/;"	s
Inner	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    struct Inner {$/;"	s
InputMode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^pub enum InputMode {$/;"	g
InternalStackElement	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^enum InternalStackElement {$/;"	g
IntoUrl	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^pub trait IntoUrl {$/;"	t
Item	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/item.rs	/^pub struct Item {$/;"	s
Item	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    type Item = HeaderView<'a>;$/;"	T
Item	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    type Item = ::Result<N::Stream>;$/;"	T
Item	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    type Item = JsonEvent;$/;"	T
Json	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub enum Json {$/;"	g
JsonEvent	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub enum JsonEvent {$/;"	g
KEEP_ALIVE	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/connection.rs	/^const KEEP_ALIVE: UniCase<&'static str> = UniCase("keep-alive");$/;"	c
Key	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^type Key = (String, u16, Scheme);$/;"	T
Key	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/keyboard.rs	/^pub enum Key {$/;"	g
LF	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^pub const LF: u8 = b'\\n';$/;"	c
LINE_ENDING	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^pub const LINE_ENDING: &'static str = "\\r\\n";$/;"	c
ListenerPool	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/listener.rs	/^pub struct ListenerPool<A: NetworkListener> {$/;"	s
Listening	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^pub struct Listening {$/;"	s
MAX_BUFFER_SIZE	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/buffer.rs	/^const MAX_BUFFER_SIZE: usize = 8192 + 4096 * 100;$/;"	c
MAX_HEADERS	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^const MAX_HEADERS: usize = 100;$/;"	c
MAX_INVALID_RESPONSE_BYTES	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^const MAX_INVALID_RESPONSE_BYTES: usize = 1024 * 128;$/;"	c
MIME	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^pub static MIME: Config =$/;"	c
MessageState	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^enum MessageState {$/;"	g
Method	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/method.rs	/^pub enum Method {$/;"	g
MockConnector	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/benches/client.rs	/^struct MockConnector;$/;"	s
MockConnector	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^pub struct MockConnector;$/;"	s
MockHttp2Connector	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^pub struct MockHttp2Connector {$/;"	s
MockStream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/benches/client.rs	/^struct MockStream {$/;"	s
MockStream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^pub struct MockStream {$/;"	s
Mouse	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/mouse.rs	/^pub enum Mouse {$/;"	g
MyDecoder	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    struct MyDecoder;$/;"	s
NEWLINE_CODE	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^const NEWLINE_CODE: u8 = 0xFD;$/;"	c
NIL_RAW_EVENT	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^const NIL_RAW_EVENT: RawEvent = RawEvent { etype: 0, emod: 0, key: 0, ch: 0, w: 0, h: 0, x: 0, y: 0 };$/;"	c
NOV_07	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/httpdate.rs	/^    const NOV_07: HttpDate = HttpDate(Tm {$/;"	c
NetworkConnections	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^pub struct NetworkConnections<'a, N: NetworkListener + 'a>(&'a mut N);$/;"	s
NetworkConnector	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^pub trait NetworkConnector {$/;"	t
NetworkListener	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^pub trait NetworkListener: Clone {$/;"	t
NetworkStream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^pub trait NetworkStream: Read + Write + Any + Send + Typeable {$/;"	t
Newline	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^pub enum Newline {$/;"	g
Object	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub type Object = BTreeMap<string::String, Json>;$/;"	T
Openssl	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    pub struct Openssl {$/;"	s
OptCell	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/cell.rs	/^pub struct OptCell<T>(UnsafeCell<Option<T>>);$/;"	s
OptionData	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    struct OptionData {$/;"	s
Outer	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    struct Outer {$/;"	s
Output	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    type Output = Json;$/;"	T
OutputMode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^pub enum OutputMode {$/;"	g
PHRASE	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/examples/hello.rs	/^static PHRASE: &'static [u8] = b"Hello World!";$/;"	c
PRE_ALLOCATE_CAP	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/lib.rs	/^    const PRE_ALLOCATE_CAP: usize = 0x100000;$/;"	c
Parser	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub struct Parser<T> {$/;"	s
ParserError	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub enum ParserError {$/;"	g
ParserState	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^enum ParserState {$/;"	g
Pool	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^pub struct Pool<C: NetworkConnector> {$/;"	s
PoolImpl	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^struct PoolImpl<S> {$/;"	s
PooledStream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^pub struct PooledStream<S> {$/;"	s
PooledStreamInner	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^struct PooledStreamInner<S> {$/;"	s
Pragma	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/pragma.rs	/^pub enum Pragma {$/;"	g
PrettyJson	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub struct PrettyJson<'a> { inner: &'a Json }$/;"	s
Protocol	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/upgrade.rs	/^pub struct Protocol {$/;"	s
Protocol	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/message.rs	/^pub trait Protocol {$/;"	t
ProtocolName	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/upgrade.rs	/^pub enum ProtocolName {$/;"	g
PtrMap	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/cell.rs	/^enum PtrMap<T> {$/;"	g
PtrMapCell	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/cell.rs	/^pub struct PtrMapCell<V: ?Sized>(UnsafeCell<PtrMap<Box<V>>>);$/;"	s
PullRequest	/Users/200246/development/Rust/bb_prs/src/main.rs	/^struct PullRequest {$/;"	s
Quality	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^pub struct Quality(pub u16);$/;"	s
QualityItem	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^pub struct QualityItem<T> {$/;"	s
RB_BOLD	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^            const RB_BOLD = 0x0100,$/;"	c
RB_NORMAL	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^            const RB_NORMAL = 0x0000,$/;"	c
RB_REVERSE	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^            const RB_REVERSE = 0x0400,$/;"	c
RB_UNDERLINE	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^            const RB_UNDERLINE = 0x0200,$/;"	c
README	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/benches/client.rs	/^static README: &'static [u8] = include_bytes!("..\/README.md");$/;"	c
RUSTBOX_RUNNING	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    static RUSTBOX_RUNNING: AtomicBool = atomic::ATOMIC_BOOL_INIT;$/;"	c
Range	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/range.rs	/^pub enum Range {$/;"	g
RangeUnit	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/accept_ranges.rs	/^pub enum RangeUnit {$/;"	g
RawStatus	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/mod.rs	/^pub struct RawStatus(pub u16, pub Cow<'static, str>);$/;"	s
RedirectPolicy	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^pub enum RedirectPolicy {$/;"	g
Reject	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^        struct Reject;$/;"	s
Request	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/request.rs	/^pub struct Request<W> {$/;"	s
Request	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/request.rs	/^pub struct Request<'a, 'b: 'a> {$/;"	s
RequestBuilder	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^pub struct RequestBuilder<'a> {$/;"	s
RequestHead	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/message.rs	/^pub struct RequestHead {$/;"	s
RequestUri	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/uri.rs	/^pub enum RequestUri {$/;"	g
Response	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/response.rs	/^pub struct Response {$/;"	s
Response	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^pub struct Response<'a, W: Any = Fresh> {$/;"	s
ResponseHead	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/message.rs	/^pub struct ResponseHead {$/;"	s
Result	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/error.rs	/^pub type Result<T> = ::std::result::Result<T, Error>;$/;"	T
RunningGuard	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    pub struct RunningGuard(());$/;"	s
RustBox	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^pub struct RustBox {$/;"	s
SPECIAL_CODES_START	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^const SPECIAL_CODES_START: u8 = NEWLINE_CODE;$/;"	c
STANDARD	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^pub static STANDARD: Config =$/;"	c
STANDARD_CHARS	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^static STANDARD_CHARS: &'static[u8] = b"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\$/;"	c
Scheme	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^enum Scheme {$/;"	g
Scheme	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^pub trait Scheme: FromStr + fmt::Debug + Clone + Send + Sync {$/;"	t
Sentinel	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/listener.rs	/^struct Sentinel<T: Send + 'static> {$/;"	s
Server	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^pub struct Server<L = HttpListener> {$/;"	s
SetCookie	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/set_cookie.rs	/^pub struct SetCookie(pub Vec<CookiePair>);$/;"	s
SlowRead	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/buffer.rs	/^    struct SlowRead(u8);$/;"	s
Ssl	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^pub trait Ssl {$/;"	t
Stack	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub struct Stack {$/;"	s
StackElement	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub enum StackElement<'l> {$/;"	g
StatusClass	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/status.rs	/^pub enum StatusClass {$/;"	g
StatusCode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/status.rs	/^pub enum StatusCode {$/;"	g
Stream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/benches/client.rs	/^    type Stream = MockStream;$/;"	T
Stream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^    type Stream = PooledStream<S>;$/;"	T
Stream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    type Stream = Box<NetworkStream + Send>;$/;"	T
Stream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^enum Stream {$/;"	g
Stream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    type Stream = Http2Stream<S>;$/;"	T
Stream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^            type Stream = $crate::mock::MockStream;$/;"	T
Stream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^            type Stream = ::mock::MockStream;$/;"	T
Stream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    type Stream = CloneableMockStream;$/;"	T
Stream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    type Stream = MockStream;$/;"	T
Stream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^        type Stream = SslStream<HttpStream>;$/;"	T
Stream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    type Stream = HttpStream;$/;"	T
Stream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    type Stream = HttpsStream<S::Stream>;$/;"	T
Stream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    type Stream = S::Stream;$/;"	T
Stream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    type Stream: Into<Box<NetworkStream + Send>>;$/;"	T
Stream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    type Stream: NetworkStream + Send + Clone;$/;"	T
Streaming	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^pub enum Streaming {}$/;"	g
StrictTransportSecurity	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/strict_transport_security.rs	/^pub struct StrictTransportSecurity {$/;"	s
Subject	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    type Subject = (Method, RequestUri);$/;"	T
Subject	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    type Subject = RawStatus;$/;"	T
Subject	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    type Subject;$/;"	T
TB_ATTRIB	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^            const TB_ATTRIB = RB_BOLD.bits | RB_UNDERLINE.bits | RB_REVERSE.bits,$/;"	c
TB_NORMAL_COLOR	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^            const TB_NORMAL_COLOR = 0x000F,$/;"	c
Target	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^    type Target = S;$/;"	T
Target	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/mod.rs	/^            type Target = $to;$/;"	T
Target	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/cell.rs	/^    type Target = Option<T>;$/;"	T
Target	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    type Target = Cow<'static, str>;$/;"	T
Timeouts	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^struct Timeouts {$/;"	s
ToBase64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^pub trait ToBase64 {$/;"	t
ToHex	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs	/^pub trait ToHex {$/;"	t
ToJson	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub trait ToJson {$/;"	t
TryParse	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^trait TryParse {$/;"	t
TryParseResult	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^type TryParseResult<T> = Result<httparse::Status<(Incoming<T>, usize)>, Error>;$/;"	T
URLSAFE_CHARS	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^static URLSAFE_CHARS: &'static[u8] = b"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\$/;"	c
URL_SAFE	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^pub static URL_SAFE: Config =$/;"	c
Value	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^            type Value = Headers;$/;"	T
Void	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/error.rs	/^pub enum Void {}$/;"	g
Worker	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^struct Worker<H: Handler + 'static> {$/;"	s
Wrapper	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^struct Wrapper<T> {$/;"	s
__hyper__deref	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/mod.rs	/^macro_rules! __hyper__deref {$/;"	d
__hyper__tm	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/mod.rs	/^macro_rules! __hyper__tm {$/;"	d
__hyper_generate_header_serialization	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/mod.rs	/^macro_rules! __hyper_generate_header_serialization {$/;"	d
_assert_send	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/lib.rs	/^fn _assert_send<T: Send>() {$/;"	f
_assert_sync	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/lib.rs	/^fn _assert_sync<T: Sync>() {$/;"	f
accept	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn accept(&mut self) -> ::Result<HttpStream> {$/;"	f
accept	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn accept(&mut self) -> ::Result<S::Stream> {$/;"	f
accept	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn accept(&mut self) -> ::Result<Self::Stream>;$/;"	f
accept	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/listener.rs	/^    pub fn accept<F>(self, work: F, threads: usize)$/;"	f
add_stream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    pub fn add_stream(&mut self, stream: CloneableMockStream) {$/;"	f
apply_to_cookie_jar	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/set_cookie.rs	/^    pub fn apply_to_cookie_jar(&self, jar: &mut CookieJar) {$/;"	f
array	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^macro_rules! array {$/;"	d
as_16color	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    pub fn as_16color(&self) -> u16 {$/;"	f
as_256color	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    pub fn as_256color(&self) -> u16 {$/;"	f
as_array	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn as_array<'a>(&'a self) -> Option<&'a Array> {$/;"	f
as_array_mut	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn as_array_mut<'a>(&'a mut self) -> Option<&'a mut Array> {$/;"	f
as_boolean	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn as_boolean(&self) -> Option<bool> {$/;"	f
as_f64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn as_f64(&self) -> Option<f64> {$/;"	f
as_i64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn as_i64(&self) -> Option<i64> {$/;"	f
as_json	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub fn as_json<T: Encodable>(t: &T) -> AsJson<T> {$/;"	f
as_mut	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    pub fn as_mut(&mut self) -> &mut T { self.obj.as_mut().unwrap() }$/;"	f
as_null	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn as_null(&self) -> Option<()> {$/;"	f
as_object	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn as_object<'a>(&'a self) -> Option<&'a Object> {$/;"	f
as_object_mut	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn as_object_mut<'a>(&'a mut self) -> Option<&'a mut Object> {$/;"	f
as_pretty_json	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub fn as_pretty_json<T: Encodable>(t: &T) -> AsPrettyJson<T> {$/;"	f
as_raw_fd	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn as_raw_fd(&self) -> ::std::os::unix::io::RawFd {$/;"	f
as_raw_socket	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn as_raw_socket(&self) -> ::std::os::windows::io::RawSocket {$/;"	f
as_ref	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn as_ref(&self) -> &str {$/;"	f
as_ref	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    pub fn as_ref(&self) -> &T { self.obj.as_ref().unwrap() }$/;"	f
as_ref	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/method.rs	/^    fn as_ref(&self) -> &str {$/;"	f
as_string	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn as_string<'a>(&'a self) -> Option<&'a str> {$/;"	f
as_u64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn as_u64(&self) -> Option<u64> {$/;"	f
assert_client_preface	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn assert_client_preface(server_stream: &mut MockStream) {$/;"	f
assert_display	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/uri.rs	/^    fn assert_display(expected_string: &str, request_uri: RequestUri) {$/;"	f
assert_no_body	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/request.rs	/^    fn assert_no_body(s: &str) {$/;"	f
assert_stream_equal	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn assert_stream_equal(src: &str,$/;"	f
bench_decode_hex_escape	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/benches/json.rs	/^fn bench_decode_hex_escape(b: &mut Bencher) {$/;"	f
bench_format	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/mod.rs	/^            fn bench_format(b: &mut Bencher) {$/;"	f
bench_from_base64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/benches/base64.rs	/^fn bench_from_base64(b: &mut Bencher) {$/;"	f
bench_from_base64_large	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/benches/base64.rs	/^fn bench_from_base64_large(b: &mut Bencher) {$/;"	f
bench_from_hex	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/benches/hex.rs	/^fn bench_from_hex(b: &mut Bencher) {$/;"	f
bench_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/mod.rs	/^macro_rules! bench_header($/;"	d
bench_headers_fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn bench_headers_fmt(b: &mut Bencher) {$/;"	f
bench_headers_from_raw	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn bench_headers_from_raw(b: &mut Bencher) {$/;"	f
bench_headers_get	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn bench_headers_get(b: &mut Bencher) {$/;"	f
bench_headers_get_miss	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn bench_headers_get_miss(b: &mut Bencher) {$/;"	f
bench_headers_has	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn bench_headers_has(b: &mut Bencher) {$/;"	f
bench_headers_new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn bench_headers_new(b: &mut Bencher) {$/;"	f
bench_headers_set	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn bench_headers_set(b: &mut Bencher) {$/;"	f
bench_headers_view_is	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn bench_headers_view_is(b: &mut Bencher) {$/;"	f
bench_large	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/benches/json.rs	/^fn bench_large(b: &mut Bencher) {$/;"	f
bench_mock_hyper	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/benches/client.rs	/^fn bench_mock_hyper(b: &mut test::Bencher) {$/;"	f
bench_parse	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/mod.rs	/^            fn bench_parse(b: &mut Bencher) {$/;"	f
bench_parse_incoming	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn bench_parse_incoming(b: &mut Bencher) {$/;"	f
bench_small	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/benches/json.rs	/^fn bench_small(b: &mut Bencher) {$/;"	f
bench_streaming_large	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/benches/json.rs	/^fn bench_streaming_large(b: &mut Bencher) {$/;"	f
bench_streaming_small	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/benches/json.rs	/^fn bench_streaming_small(b: &mut Bencher) {$/;"	f
bench_to_base64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/benches/base64.rs	/^fn bench_to_base64(b: &mut Bencher) {$/;"	f
bench_to_base64_large	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/benches/base64.rs	/^fn bench_to_base64_large(b: &mut Bencher) {$/;"	f
bench_to_hex	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/benches/hex.rs	/^fn bench_to_hex(b: &mut Bencher) {$/;"	f
big_json	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/benches/json.rs	/^fn big_json() -> string::String {$/;"	f
body	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    pub fn body<B: Into<Body<'a>>>(mut self, body: B) -> RequestBuilder<'a> {$/;"	f
build	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn build(&mut self) -> Result<Json, BuilderError> {$/;"	f
build_array	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn build_array(&mut self) -> Result<Json, BuilderError> {$/;"	f
build_http2_response	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^pub fn build_http2_response(status: &[u8], headers: &Headers, body: Option<Vec<u8>>) -> Vec<u8> {$/;"	f
build_object	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn build_object(&mut self) -> Result<Json, BuilderError> {$/;"	f
build_value	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn build_value(&mut self) -> Result<Json, BuilderError> {$/;"	f
bump	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn bump(&mut self) {$/;"	f
bump_index	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn bump_index(&mut self) {$/;"	f
byte	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    macro_rules! byte ($/;"	d
bytes	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/range.rs	/^    pub fn bytes(from: u64, to: u64) -> Range {$/;"	f
bytes_multi	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/range.rs	/^    pub fn bytes_multi(ranges: Vec<(u64, u64)>) -> Range {$/;"	f
canonical_reason	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/status.rs	/^    pub fn canonical_reason(&self) -> Option<&'static str> {$/;"	f
cap_capacity	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/lib.rs	/^fn cap_capacity<T>(given_len: usize) -> usize {$/;"	f
capacity_rules	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^fn capacity_rules() {$/;"	f
cause	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/error.rs	/^    fn cause(&self) -> Option<&StdError> {$/;"	f
cause	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn cause(&self) -> Option<&::std::error::Error> {$/;"	f
cause	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    fn cause(&self) -> Option<&Error> {$/;"	f
cause	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn cause(&self) -> Option<&StdError> {$/;"	f
ch_is	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn ch_is(&self, c: char) -> bool {$/;"	f
ch_or_null	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn ch_or_null(&self) -> char { self.ch.unwrap_or('\\x00') }$/;"	f
change_cell	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    pub unsafe fn change_cell(&self, x: usize, y: usize, ch: u32, fg: u16, bg: u16) {$/;"	f
check_continue	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^            fn check_continue(&self, _: (&Method, &RequestUri, &Headers)) -> StatusCode {$/;"	f
check_continue	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    fn check_continue(&self, _: (&Method, &RequestUri, &Headers)) -> StatusCode {$/;"	f
check_encoder_for_simple	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    macro_rules! check_encoder_for_simple {$/;"	d
check_err	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn check_err<T: Decodable>(to_parse: &'static str, expected: DecoderError) {$/;"	f
check_slice_validity	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/entity.rs	/^fn check_slice_validity(slice: &str) -> bool {$/;"	f
class	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/status.rs	/^    pub fn class(&self) -> StatusClass {$/;"	f
clear	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    pub fn clear(&mut self) {$/;"	f
clear	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    pub fn clear(&self) {$/;"	f
clear_idle	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^    pub fn clear_idle(&mut self) {$/;"	f
clone	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/benches/client.rs	/^    fn clone(&self) -> MockStream {$/;"	f
clone	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    fn clone(&self) -> RedirectPolicy {$/;"	f
clone	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/cell.rs	/^    fn clone(&self) -> OptCell<T> {$/;"	f
clone	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/cell.rs	/^    fn clone(&self) -> PtrMapCell<V> {$/;"	f
clone	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn clone(&self) -> Box<HeaderFormat + Send + Sync> {$/;"	f
clone	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn clone(&self) -> HttpListener {$/;"	f
clone	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn clone(&self) -> HttpStream {$/;"	f
clone	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/status.rs	/^    fn clone(&self) -> StatusCode {$/;"	f
clone	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn clone(&self) -> Self { *self }$/;"	f
clone_box	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn clone_box(&self) -> Box<HeaderFormat + Send + Sync> {$/;"	f
clone_box	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn clone_box(&self) -> Box<HeaderFormat + Send + Sync>;$/;"	f
close	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^    fn close(&mut self, how: Shutdown) -> io::Result<()> {$/;"	f
close	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/connection.rs	/^    pub fn close() -> Connection {$/;"	f
close	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn close(&mut self) -> Result<(), io::Error> {$/;"	f
close	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    fn close(&mut self) -> Result<(), io::Error> {$/;"	f
close	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    fn close(&mut self, _how: Shutdown) -> io::Result<()> {$/;"	f
close	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    fn close(&mut self, how: Shutdown) -> io::Result<()> {$/;"	f
close	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^        fn close(&mut self, how: Shutdown) -> io::Result<()> {$/;"	f
close	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn close(&mut self, _how: Shutdown) -> io::Result<()> {$/;"	f
close	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn close(&mut self, how: Shutdown) -> io::Result<()> {$/;"	f
close	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    pub fn close(&mut self) -> ::Result<()> {$/;"	f
close_connection	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn close_connection(&mut self) -> ::Result<()> {$/;"	f
close_connection	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn close_connection(&mut self) -> ::Result<()> {$/;"	f
close_connection	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/message.rs	/^    fn close_connection(&mut self) -> ::Result<()>;$/;"	f
cmp	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/status.rs	/^    fn cmp(&self, other: &StatusCode) -> Ordering {$/;"	f
connect	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/benches/client.rs	/^    fn connect(&self, _: &str, _: u16, _: &str) -> hyper::Result<MockStream> {$/;"	f
connect	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^    fn connect(&self, host: &str, port: u16, scheme: &str) -> ::Result<PooledStream<S>> {$/;"	f
connect	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn connect(&self, host: &str, port: u16, scheme: &str)$/;"	f
connect	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn connect(mut self) -> Result<ClientStream<Self::Stream>, Self::Err> {$/;"	f
connect	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^            fn connect(&self, _: &str, _: u16, _: &str)$/;"	f
connect	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^            fn connect(&self, host: &str, port: u16, scheme: &str)$/;"	f
connect	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    fn connect(&self, _host: &str, _port: u16, _scheme: &str) -> ::Result<MockStream> {$/;"	f
connect	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    fn connect(&self, _host: &str, _port: u16, _scheme: &str)$/;"	f
connect	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn connect(&self, host: &str, port: u16, scheme: &str) -> ::Result<HttpStream> {$/;"	f
connect	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn connect(&self, host: &str, port: u16, scheme: &str) -> ::Result<Self::Stream> {$/;"	f
connect	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn connect(&self, host: &str, port: u16, scheme: &str) -> ::Result<Self::Stream>;$/;"	f
construct	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^    pub fn construct(version: version::HttpVersion,$/;"	f
consume	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/buffer.rs	/^    fn consume(&mut self, amt: usize) {$/;"	f
cookie_jar	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/cookie.rs	/^fn cookie_jar() {$/;"	f
cookie_jar	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/set_cookie.rs	/^fn cookie_jar() {$/;"	f
count_idents	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^macro_rules! count_idents {$/;"	d
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/collection_impls.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<BTreeMap<K, V>, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/collection_impls.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<BTreeSet<T>, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/collection_impls.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<HashMap<K, V>, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/collection_impls.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<HashSet<T>, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/collection_impls.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<LinkedList<T>, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/collection_impls.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<VecDeque<T>, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub fn decode<T: ::Decodable>(s: &str) -> DecodeResult<T> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^            fn decode<D: Decoder>(d: &mut D) -> Result<($($name,)*), D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^            fn decode<D: Decoder>(d: &mut D) -> Result<[T; $len], D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(_d: &mut D) -> Result<PhantomData<T>, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<(), D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<Arc<T>, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<Box<T>, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<Box<[T]>, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<Cell<T>, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<Cow<'static, T>, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<Option<T>, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<Rc<T>, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<RefCell<T>, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error>;$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<String, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<Vec<T>, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<bool, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<char, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<f32, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<f64, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<i16, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<i32, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<i64, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<i8, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<isize, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<path::PathBuf, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<u16, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<u32, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<u64, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<u8, D::Error> {$/;"	f
decode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn decode<D: Decoder>(d: &mut D) -> Result<usize, D::Error> {$/;"	f
decode_hex_escape	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn decode_hex_escape(&mut self) -> Result<u16, ParserError> {$/;"	f
deconstruct	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/request.rs	/^    pub fn deconstruct(self) -> (SocketAddr, Method, Headers,$/;"	f
deconstruct	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^    pub fn deconstruct(self) -> (version::HttpVersion, HttpWriter<&'a mut (Write + 'a)>,$/;"	f
default	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    fn default() -> Client { Client::new() }$/;"	f
default	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    fn default() -> RedirectPolicy {$/;"	f
default	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^    fn default() -> Config {$/;"	f
default	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^    fn default() -> Quality {$/;"	f
default	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^        fn default() -> Openssl {$/;"	f
default	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    fn default() -> Timeouts {$/;"	f
default	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    fn default() -> Self {$/;"	f
default_code	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/status.rs	/^    pub fn default_code(&self) -> StatusCode {$/;"	f
delete	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    pub fn delete<U: IntoUrl>(&self, url: U) -> RequestBuilder {$/;"	f
deref	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^    fn deref(&self) -> &S {$/;"	f
deref	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/mod.rs	/^            fn deref(&self) -> &$to {$/;"	f
deref	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/cell.rs	/^    fn deref(&self) -> &Option<T> {$/;"	f
deref	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn deref(&self) -> &Cow<'static, str> {$/;"	f
deref_mut	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^    fn deref_mut(&mut self) -> &mut S {$/;"	f
deref_mut	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/mod.rs	/^            fn deref_mut(&mut self) -> &mut $to {$/;"	f
deref_mut	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn deref_mut(&mut self) -> &mut Cow<'static, str> {$/;"	f
description	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/error.rs	/^    fn description(&self) -> &str {$/;"	f
description	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn description(&self) -> &str {$/;"	f
description	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    fn description(&self) -> &str {$/;"	f
description	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^   fn description(&self) -> &str {$/;"	f
description	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^    fn description(&self) -> &str {$/;"	f
description	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs	/^    fn description(&self) -> &str {$/;"	f
description	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn description(&self) -> &str { "decoder error" }$/;"	f
description	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn description(&self) -> &str { "encoder error" }$/;"	f
description	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn description(&self) -> &str { "failed to parse json" }$/;"	f
deserialize	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/mod.rs	/^            fn deserialize<D>(deserializer: &mut D) -> Result<$id, D::Error>$/;"	f
deserialize	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn deserialize<D>(deserializer: &mut D) -> Result<Headers, D::Error> where D: Deserializer {$/;"	f
deserialize	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/mod.rs	/^    fn deserialize<D>(deserializer: &mut D) -> Result<RawStatus, D::Error> where D: Deserializer {$/;"	f
deserialize	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/method.rs	/^    fn deserialize<D>(deserializer: &mut D) -> Result<Method, D::Error> where D: Deserializer {$/;"	f
downcast	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/message.rs	/^    pub fn downcast<T: Any>(self: Box<HttpMessage>)$/;"	f
downcast	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    pub fn downcast<T: Any>(self: Box<NetworkStream + Send>)$/;"	f
downcast	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    pub fn downcast<T: Any>(self: Box<NetworkStream>)$/;"	f
downcast_mut	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/message.rs	/^    pub fn downcast_mut<T: Any>(&mut self) -> Option<&mut T> {$/;"	f
downcast_mut	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    pub fn downcast_mut<T: Any>(&mut self) -> Option<&mut T> {$/;"	f
downcast_mut_unchecked	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    unsafe fn downcast_mut_unchecked<T: 'static>(&mut self) -> &mut T {$/;"	f
downcast_mut_unchecked	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/message.rs	/^    unsafe fn downcast_mut_unchecked<T: 'static>(&mut self) -> &mut T {$/;"	f
downcast_mut_unchecked	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    unsafe fn downcast_mut_unchecked<T: 'static>(&mut self) -> &mut T {$/;"	f
downcast_ref	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/message.rs	/^    pub fn downcast_ref<T: Any>(&self) -> Option<&T> {$/;"	f
downcast_ref	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    pub fn downcast_ref<T: Any>(&self) -> Option<&T> {$/;"	f
downcast_ref	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/request.rs	/^    pub fn downcast_ref<T: NetworkStream>(&self) -> Option<&T> {$/;"	f
downcast_ref_unchecked	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    unsafe fn downcast_ref_unchecked<T: 'static>(&self) -> &T {$/;"	f
downcast_ref_unchecked	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/message.rs	/^    unsafe fn downcast_ref_unchecked<T: 'static>(&self) -> &T {$/;"	f
downcast_ref_unchecked	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    unsafe fn downcast_ref_unchecked<T: 'static>(&self) -> &T {$/;"	f
downcast_unchecked	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/message.rs	/^    unsafe fn downcast_unchecked<T: 'static>(self: Box<HttpMessage>) -> Box<T>  {$/;"	f
downcast_unchecked	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    unsafe fn downcast_unchecked<T: 'static>(self: Box<NetworkStream + Send>) -> Box<T>  {$/;"	f
downcast_unchecked	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    unsafe fn downcast_unchecked<T: 'static>(self: Box<NetworkStream>) -> Box<T>  {$/;"	f
drop	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^    fn drop(&mut self) {$/;"	f
drop	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/response.rs	/^    fn drop(&mut self) {$/;"	f
drop	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/listener.rs	/^    fn drop(&mut self) {$/;"	f
drop	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    fn drop(&mut self) {$/;"	f
drop	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^    fn drop(&mut self) {$/;"	f
drop	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^        fn drop(&mut self) {$/;"	f
drop	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    fn drop(&mut self) {$/;"	f
eat	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^fn eat<R: Read>(rdr: &mut R, bytes: &[u8]) -> io::Result<()> {$/;"	f
echo	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/examples/server.rs	/^fn echo(mut req: Request, mut res: Response) {$/;"	f
emit_bool	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_bool(&mut self, v: bool) -> EncodeResult<()> {$/;"	f
emit_bool	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_bool(&mut self, v: bool) -> Result<(), Self::Error>;$/;"	f
emit_char	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_char(&mut self, v: char) -> EncodeResult<()> {$/;"	f
emit_char	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_char(&mut self, v: char) -> Result<(), Self::Error>;$/;"	f
emit_enquoted_if_mapkey	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^macro_rules! emit_enquoted_if_mapkey {$/;"	d
emit_enum	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_enum<F>(&mut self, _name: &str, f: F) -> EncodeResult<()> where$/;"	f
emit_enum	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_enum<F>(&mut self, name: &str, f: F) -> Result<(), Self::Error>$/;"	f
emit_enum_struct_variant	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_enum_struct_variant<F>(&mut self,$/;"	f
emit_enum_struct_variant	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_enum_struct_variant<F>(&mut self, v_name: &str,$/;"	f
emit_enum_struct_variant_field	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_enum_struct_variant_field<F>(&mut self,$/;"	f
emit_enum_struct_variant_field	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_enum_struct_variant_field<F>(&mut self,$/;"	f
emit_enum_variant	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_enum_variant<F>(&mut self,$/;"	f
emit_enum_variant	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_enum_variant<F>(&mut self, v_name: &str,$/;"	f
emit_enum_variant_arg	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_enum_variant_arg<F>(&mut self, idx: usize, f: F) -> EncodeResult<()> where$/;"	f
emit_enum_variant_arg	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_enum_variant_arg<F>(&mut self, a_idx: usize, f: F)$/;"	f
emit_f32	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_f32(&mut self, v: f32) -> EncodeResult<()> {$/;"	f
emit_f32	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_f32(&mut self, v: f32) -> Result<(), Self::Error>;$/;"	f
emit_f64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_f64(&mut self, v: f64) -> EncodeResult<()> {$/;"	f
emit_f64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_f64(&mut self, v: f64) -> Result<(), Self::Error>;$/;"	f
emit_from_vec	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_from_vec<T, F>(&mut self, v: &[T], f: F)$/;"	f
emit_from_vec	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_from_vec<T, F>(&mut self, v: &[T], mut f: F) -> Result<(), S::Error> where$/;"	f
emit_i16	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_i16(&mut self, v: i16) -> EncodeResult<()> { emit_enquoted_if_mapkey!(self, v) }$/;"	f
emit_i16	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_i16(&mut self, v: i16) -> Result<(), Self::Error>;$/;"	f
emit_i32	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_i32(&mut self, v: i32) -> EncodeResult<()> { emit_enquoted_if_mapkey!(self, v) }$/;"	f
emit_i32	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_i32(&mut self, v: i32) -> Result<(), Self::Error>;$/;"	f
emit_i64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_i64(&mut self, v: i64) -> EncodeResult<()> { emit_enquoted_if_mapkey!(self, v) }$/;"	f
emit_i64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_i64(&mut self, v: i64) -> Result<(), Self::Error>;$/;"	f
emit_i8	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_i8(&mut self, v: i8) -> EncodeResult<()> { emit_enquoted_if_mapkey!(self, v) }$/;"	f
emit_i8	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_i8(&mut self, v: i8) -> Result<(), Self::Error>;$/;"	f
emit_isize	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_isize(&mut self, v: isize) -> EncodeResult<()> { emit_enquoted_if_mapkey!(self, v) }$/;"	f
emit_isize	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_isize(&mut self, v: isize) -> Result<(), Self::Error>;$/;"	f
emit_map	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_map<F>(&mut self, len: usize, f: F) -> EncodeResult<()> where$/;"	f
emit_map	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_map<F>(&mut self, len: usize, f: F) -> Result<(), Self::Error>$/;"	f
emit_map_elt_key	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_map_elt_key<F>(&mut self, idx: usize, f: F) -> EncodeResult<()> where$/;"	f
emit_map_elt_key	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_map_elt_key<F>(&mut self, idx: usize, f: F) -> Result<(), Self::Error>$/;"	f
emit_map_elt_val	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_map_elt_val<F>(&mut self, _idx: usize, f: F) -> EncodeResult<()> where$/;"	f
emit_map_elt_val	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_map_elt_val<F>(&mut self, idx: usize, f: F) -> Result<(), Self::Error>$/;"	f
emit_nil	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_nil(&mut self) -> EncodeResult<()> {$/;"	f
emit_nil	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_nil(&mut self) -> Result<(), Self::Error>;$/;"	f
emit_option	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_option<F>(&mut self, f: F) -> EncodeResult<()> where$/;"	f
emit_option	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_option<F>(&mut self, f: F) -> Result<(), Self::Error>$/;"	f
emit_option_none	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_option_none(&mut self) -> EncodeResult<()> {$/;"	f
emit_option_none	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_option_none(&mut self) -> Result<(), Self::Error>;$/;"	f
emit_option_some	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_option_some<F>(&mut self, f: F) -> EncodeResult<()> where$/;"	f
emit_option_some	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_option_some<F>(&mut self, f: F) -> Result<(), Self::Error>$/;"	f
emit_seq	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_seq<F>(&mut self, len: usize, f: F) -> EncodeResult<()> where$/;"	f
emit_seq	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_seq<F>(&mut self, len: usize, f: F) -> Result<(), Self::Error>$/;"	f
emit_seq_elt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_seq_elt<F>(&mut self, idx: usize, f: F) -> EncodeResult<()> where$/;"	f
emit_seq_elt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_seq_elt<F>(&mut self, idx: usize, f: F) -> Result<(), Self::Error>$/;"	f
emit_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_str(&mut self, v: &str) -> EncodeResult<()> {$/;"	f
emit_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_str(&mut self, v: &str) -> Result<(), Self::Error>;$/;"	f
emit_struct	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_struct<F>(&mut self, _: &str, len: usize, f: F) -> EncodeResult<()> where$/;"	f
emit_struct	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_struct<F>(&mut self, name: &str, len: usize, f: F)$/;"	f
emit_struct_field	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_struct_field<F>(&mut self, name: &str, idx: usize, f: F) -> EncodeResult<()> where$/;"	f
emit_struct_field	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_struct_field<F>(&mut self, f_name: &str, f_idx: usize, f: F)$/;"	f
emit_tuple	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_tuple<F>(&mut self, len: usize, f: F) -> EncodeResult<()> where$/;"	f
emit_tuple	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_tuple<F>(&mut self, len: usize, f: F) -> Result<(), Self::Error>$/;"	f
emit_tuple_arg	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_tuple_arg<F>(&mut self, idx: usize, f: F) -> EncodeResult<()> where$/;"	f
emit_tuple_arg	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_tuple_arg<F>(&mut self, idx: usize, f: F) -> Result<(), Self::Error>$/;"	f
emit_tuple_struct	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_tuple_struct<F>(&mut self, _: &str, len: usize, f: F) -> EncodeResult<()> where$/;"	f
emit_tuple_struct	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_tuple_struct<F>(&mut self, name: &str, len: usize, f: F)$/;"	f
emit_tuple_struct_arg	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_tuple_struct_arg<F>(&mut self, idx: usize, f: F) -> EncodeResult<()> where$/;"	f
emit_tuple_struct_arg	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_tuple_struct_arg<F>(&mut self, f_idx: usize, f: F)$/;"	f
emit_u16	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_u16(&mut self, v: u16) -> EncodeResult<()> { emit_enquoted_if_mapkey!(self, v) }$/;"	f
emit_u16	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_u16(&mut self, v: u16) -> Result<(), Self::Error>;$/;"	f
emit_u32	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_u32(&mut self, v: u32) -> EncodeResult<()> { emit_enquoted_if_mapkey!(self, v) }$/;"	f
emit_u32	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_u32(&mut self, v: u32) -> Result<(), Self::Error>;$/;"	f
emit_u64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_u64(&mut self, v: u64) -> EncodeResult<()> { emit_enquoted_if_mapkey!(self, v) }$/;"	f
emit_u64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_u64(&mut self, v: u64) -> Result<(), Self::Error>;$/;"	f
emit_u8	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_u8(&mut self, v: u8) -> EncodeResult<()> { emit_enquoted_if_mapkey!(self, v) }$/;"	f
emit_u8	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_u8(&mut self, v: u8) -> Result<(), Self::Error>;$/;"	f
emit_usize	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn emit_usize(&mut self, v: usize) -> EncodeResult<()> { emit_enquoted_if_mapkey!(self, v) }$/;"	f
emit_usize	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn emit_usize(&mut self, v: usize) -> Result<(), Self::Error>;$/;"	f
encode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/collection_impls.rs	/^    fn encode<E: Encoder>(&self, e: &mut E) -> Result<(), E::Error> {$/;"	f
encode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/collection_impls.rs	/^    fn encode<E: Encoder>(&self, s: &mut E) -> Result<(), E::Error> {$/;"	f
encode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/collection_impls.rs	/^    fn encode<S: Encoder>(&self, e: &mut S) -> Result<(), S::Error> {$/;"	f
encode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/collection_impls.rs	/^    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {$/;"	f
encode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn encode<S: ::Encoder>(&self, e: &mut S) -> Result<(), S::Error> {$/;"	f
encode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub fn encode<T: ::Encodable>(object: &T) -> EncodeResult<string::String> {$/;"	f
encode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^            fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {$/;"	f
encode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn encode<S: Encoder>(&self, e: &mut S) -> Result<(), S::Error> {$/;"	f
encode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {$/;"	f
encode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error>;$/;"	f
end	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    pub fn end(mut self) -> Result<W, EndError<W>> {$/;"	f
end	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^        fn end<W: Write>(w: &mut W) {$/;"	f
end	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^    pub fn end(self) -> io::Result<()> {$/;"	f
ends_with	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn ends_with(&self, rhs: &[StackElement]) -> bool {$/;"	f
eof	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn eof(&self) -> bool { self.ch.is_none() }$/;"	f
eq	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn eq(&self, other: &Headers) -> bool {$/;"	f
eq	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    fn eq(&self, other: &MockStream) -> bool {$/;"	f
eq	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/status.rs	/^    fn eq(&self, other: &StatusCode) -> bool {$/;"	f
eq	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn eq(&self, other: &ParserError) -> bool {$/;"	f
error	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn error(&mut self, err: &str) -> DecoderError {$/;"	f
error	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn error<E>(&self, reason: ErrorCode) -> Result<E, ParserError> {$/;"	f
error	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn error(&mut self, err: &str) -> Self::Error { () }$/;"	f
error	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn error(&mut self, err: &str) -> Self::Error;$/;"	f
error_event	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn error_event(&mut self, reason: ErrorCode) -> JsonEvent {$/;"	f
error_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^pub fn error_str(error: ErrorCode) -> &'static str {$/;"	f
escape_char	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^fn escape_char(writer: &mut fmt::Write, v: char) -> EncodeResult<()> {$/;"	f
escape_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^fn escape_str(wr: &mut fmt::Write, v: &str) -> EncodeResult<()> {$/;"	f
excluding_subdomains	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/strict_transport_security.rs	/^    pub fn excluding_subdomains(max_age: u64) -> StrictTransportSecurity {$/;"	f
expect	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^macro_rules! expect {$/;"	d
extend	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn extend<I: IntoIterator<Item=HeaderView<'a>>>(&mut self, iter: I) {$/;"	f
fill_buf	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/buffer.rs	/^    fn fill_buf(&mut self) -> io::Result<&[u8]> {$/;"	f
find	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn find<'a>(&'a self, key: &str) -> Option<&'a Json>{$/;"	f
find_path	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn find_path<'a>(&'a self, keys: &[&str]) -> Option<&'a Json>{$/;"	f
fixed_length_array	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn fixed_length_array() {$/;"	f
flush	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/benches/client.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	f
flush	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	f
flush	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/request.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	f
flush	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	f
flush	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	f
flush	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	f
flush	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	f
flush	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	f
flush_outgoing	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    pub fn flush_outgoing(&mut self) -> ::Result<()> {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/error.rs	/^    fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/accept_ranges.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/access_control_allow_credentials.rs	/^    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/access_control_allow_origin.rs	/^    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/cache_control.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/connection.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_disposition.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_length.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_range.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/if_range.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/mod.rs	/^            fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/range.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/upgrade.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/item.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^   fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/parsing.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/charset.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/encoding.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/entity.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/httpdate.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> Result<(), ::std::fmt::Error> {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/method.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/status.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/uri.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/version.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^   fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_comma_delimited	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/parsing.rs	/^pub fn fmt_comma_delimited<T: Display>(f: &mut fmt::Formatter, parts: &[T]) -> fmt::Result {$/;"	f
fmt_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/benches/client.rs	/^    fn fmt_header(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/access_control_allow_credentials.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/access_control_allow_origin.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/cache_control.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_disposition.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_length.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/cookie.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/expect.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/host.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/if_range.rs	/^    fn fmt_header(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {$/;"	f
fmt_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/mod.rs	/^            fn fmt_header(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {$/;"	f
fmt_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/pragma.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/range.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/set_cookie.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/strict_transport_security.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^        fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result;$/;"	f
fmt_number_or_null	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^fn fmt_number_or_null(v: f64) -> string::String {$/;"	f
fmt_scheme	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^	fn fmt_scheme(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_scheme	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^    fn fmt_scheme(&self, &mut fmt::Formatter) -> fmt::Result;$/;"	f
fmt_scheme	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^    fn fmt_scheme(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
follow_if	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^        fn follow_if(url: &Url) -> bool {$/;"	f
form_url_encoded	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_type.rs	/^    pub fn form_url_encoded() -> ContentType {$/;"	f
from	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    fn from(r: &'a mut R) -> Body<'a> {$/;"	f
from	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^    fn from(s: &'a str) -> Scheme {$/;"	f
from	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/error.rs	/^    fn from(err: FromUtf8Error) -> Error {$/;"	f
from	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/error.rs	/^    fn from(err: Http2Error) -> Error {$/;"	f
from	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/error.rs	/^    fn from(err: IoError) -> Error {$/;"	f
from	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/error.rs	/^    fn from(err: SslError) -> Error {$/;"	f
from	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/error.rs	/^    fn from(err: Utf8Error) -> Error {$/;"	f
from	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/error.rs	/^    fn from(err: httparse::Error) -> Error {$/;"	f
from	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/error.rs	/^    fn from(err: url::ParseError) -> Error {$/;"	f
from	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/error.rs	/^    macro_rules! from {$/;"	d
from	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn from(e: EndError<W>) -> io::Error {$/;"	f
from	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn from(e: io::Error) -> Http2ConnectError { Http2ConnectError(e) }$/;"	f
from	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn from(listener: TcpListener) -> HttpListener {$/;"	f
from	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn from(s: T) -> Box<NetworkStream + Send> {$/;"	f
from	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn from(err: ParserError) -> DecoderError {$/;"	f
from	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn from(err: fmt::Error) -> EncoderError { EncoderError::FmtError(err) }$/;"	f
from	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn from(err: io::Error) -> ParserError {$/;"	f
from_256color	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^        pub fn from_256color(color: super::Color) -> Style {$/;"	f
from_and_cause	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/error.rs	/^    macro_rules! from_and_cause {$/;"	d
from_base64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^    fn from_base64(&self) -> Result<Vec<u8>, FromBase64Error> {$/;"	f
from_base64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^    fn from_base64(&self) -> Result<Vec<u8>, FromBase64Error>;$/;"	f
from_code	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/keyboard.rs	/^    pub fn from_code(code: u16) -> Option<Key> {$/;"	f
from_code	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/mouse.rs	/^    pub fn from_code(code: u16) -> Option<Mouse> {$/;"	f
from_color	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^        pub fn from_color(color: super::Color) -> Style {$/;"	f
from_comma_delimited	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/parsing.rs	/^pub fn from_comma_delimited<T: str::FromStr>(raw: &[Vec<u8>]) -> ::Result<Vec<T>> {$/;"	f
from_cookie_jar	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/cookie.rs	/^    pub fn from_cookie_jar(jar: &CookieJar) -> Cookie {$/;"	f
from_cookie_jar	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/set_cookie.rs	/^    pub fn from_cookie_jar(jar: &CookieJar) -> SetCookie {$/;"	f
from_f32	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^fn from_f32(f: f32) -> Quality {$/;"	f
from_hex	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs	/^    fn from_hex(&self) -> Result<Vec<u8>, FromHexError> {$/;"	f
from_hex	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs	/^    fn from_hex(&self) -> Result<Vec<u8>, FromHexError>;$/;"	f
from_i64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^   fn from_i64(n: i64) -> Option<EventError> {$/;"	f
from_i64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^   fn from_i64(n: i64) -> Option<InitError> {$/;"	f
from_iter	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn from_iter<I: IntoIterator<Item=HeaderView<'a>>>(iter: I) -> Headers {$/;"	f
from_one_comma_delimited	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/parsing.rs	/^pub fn from_one_comma_delimited<T: str::FromStr>(raw: &[u8]) -> ::Result<Vec<T>> {$/;"	f
from_one_raw_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/parsing.rs	/^pub fn from_one_raw_str<T: str::FromStr>(raw: &[Vec<u8>]) -> ::Result<T> {$/;"	f
from_raw	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    pub fn from_raw(raw: &[httparse::Header]) -> ::Result<Headers> {$/;"	f
from_raw_fd	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    unsafe fn from_raw_fd(fd: ::std::os::unix::io::RawFd) -> HttpListener {$/;"	f
from_raw_fd	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    unsafe fn from_raw_fd(fd: ::std::os::unix::io::RawFd) -> HttpStream {$/;"	f
from_raw_socket	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    unsafe fn from_raw_socket(sock: ::std::os::windows::io::RawSocket) -> HttpListener {$/;"	f
from_raw_socket	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    unsafe fn from_raw_socket(sock: ::std::os::windows::io::RawSocket) -> HttpStream {$/;"	f
from_raw_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/parsing.rs	/^pub fn from_raw_str<T: str::FromStr>(raw: &[u8]) -> ::Result<T> {$/;"	f
from_reader	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn from_reader(rdr: &mut io::Read) -> Result<Self, BuilderError> {$/;"	f
from_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/accept_ranges.rs	/^    fn from_str(s: &str) -> ::Result<Self> {$/;"	f
from_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^	fn from_str(s: &str) -> ::Result<Bearer> {$/;"	f
from_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^    fn from_str(s: &str) -> ::Result<Basic> {$/;"	f
from_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/cache_control.rs	/^    fn from_str(s: &str) -> Result<CacheDirective, Option<<u32 as FromStr>::Err>> {$/;"	f
from_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/connection.rs	/^    fn from_str(s: &str) -> Result<ConnectionOption, ()> {$/;"	f
from_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_range.rs	/^    fn from_str(s: &str) -> ::Result<Self> {$/;"	f
from_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/range.rs	/^    fn from_str(s: &str) -> ::Result<ByteRangeSpec> {$/;"	f
from_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/range.rs	/^    fn from_str(s: &str) -> ::Result<Range> {$/;"	f
from_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/strict_transport_security.rs	/^    fn from_str(s: &str) -> ::Result<StrictTransportSecurity> {$/;"	f
from_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/upgrade.rs	/^    fn from_str(s: &str) -> Result<Protocol, ()> {$/;"	f
from_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/upgrade.rs	/^    fn from_str(s: &str) -> Result<ProtocolName, ()> {$/;"	f
from_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/charset.rs	/^    fn from_str(s: &str) -> ::Result<Charset> {$/;"	f
from_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/encoding.rs	/^    fn from_str(s: &str) -> ::Result<Encoding> {$/;"	f
from_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/entity.rs	/^    fn from_str(s: &str) -> ::Result<EntityTag> {$/;"	f
from_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/httpdate.rs	/^    fn from_str(s: &str) -> ::Result<HttpDate> {$/;"	f
from_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^    fn from_str(s: &str) -> ::Result<QualityItem<T>> {$/;"	f
from_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/method.rs	/^    fn from_str(s: &str) -> Result<Method, Error> {$/;"	f
from_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/uri.rs	/^    fn from_str(s: &str) -> Result<RequestUri, Error> {$/;"	f
from_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn from_str(s: &str) -> Result<Json, ParserError> {$/;"	f
from_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn from_str(s: &str) -> Result<Self, BuilderError> {$/;"	f
from_u16	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/status.rs	/^    pub fn from_u16(n: u16) -> StatusCode {$/;"	f
from_u64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^   fn from_u64(n: u64) -> Option<EventError> {$/;"	f
from_u64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^   fn from_u64(n: u64) -> Option<InitError> {$/;"	f
get	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    pub fn get<U: IntoUrl>(&self, url: U) -> RequestBuilder {$/;"	f
get	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/cell.rs	/^    pub fn get(&self, key: TypeId) -> Option<&V> {$/;"	f
get	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    pub fn get<H: Header + HeaderFormat>(&self) -> Option<&H> {$/;"	f
get	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn get<'l>(&'l self, idx: usize) -> StackElement<'l> {$/;"	f
get_buf	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/buffer.rs	/^    pub fn get_buf(&self) -> &[u8] {$/;"	f
get_host_and_port	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^fn get_host_and_port(url: &Url) -> ::Result<(String, u16)> {$/;"	f
get_incoming	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn get_incoming(&mut self) -> ::Result<ResponseHead> {$/;"	f
get_incoming	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn get_incoming(&mut self) -> ::Result<ResponseHead> {$/;"	f
get_incoming	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/message.rs	/^    fn get_incoming(&mut self) -> ::Result<ResponseHead>;$/;"	f
get_matched_pull_requests	/Users/200246/development/Rust/bb_prs/src/main.rs	/^fn get_matched_pull_requests(pull_requests: Vec<PullRequest>, query: String) -> Vec<PullRequest> {$/;"	f
get_mut	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/buffer.rs	/^    pub fn get_mut(&mut self) -> &mut R { &mut self.inner }$/;"	f
get_mut	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/cell.rs	/^    pub fn get_mut(&mut self, key: TypeId) -> Option<&mut V> {$/;"	f
get_mut	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/cell.rs	/^    pub unsafe fn get_mut(&mut self) -> &mut T {$/;"	f
get_mut	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    pub fn get_mut<H: Header + HeaderFormat>(&mut self) -> Option<&mut H> {$/;"	f
get_mut	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    pub fn get_mut(&mut self) -> &mut (NetworkStream + Send) {$/;"	f
get_mut	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    pub fn get_mut(&mut self) -> &mut R {$/;"	f
get_mut	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    pub fn get_mut(&mut self) -> &mut W {$/;"	f
get_pull_requests	/Users/200246/development/Rust/bb_prs/src/main.rs	/^fn get_pull_requests() -> Vec<PullRequest> {$/;"	f
get_raw	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    pub fn get_raw(&self, name: &str) -> Option<&[Vec<u8>]> {$/;"	f
get_ref	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/buffer.rs	/^    pub fn get_ref(&self) -> &R { &self.inner }$/;"	f
get_ref	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    pub fn get_ref(&self) -> &(NetworkStream + Send) {$/;"	f
get_ref	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    pub fn get_ref(&self) -> &R {$/;"	f
get_ref	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    pub fn get_ref(&self) -> &W {$/;"	f
grow_zerofill	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/buffer.rs	/^unsafe fn grow_zerofill(buf: &mut Vec<u8>, additional: usize) {$/;"	f
handle	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^            fn handle<'a, 'k>(&'a self, _: Request<'a, 'k>, res: Response<'a, Fresh>) {$/;"	f
handle	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^        fn handle(_: Request, res: Response<Fresh>) {$/;"	f
handle	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    fn handle<'a, 'k>(&'a self, Request<'a, 'k>, Response<'a, Fresh>);$/;"	f
handle	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    fn handle<'a, 'k>(&'a self, req: Request<'a, 'k>, res: Response<'a, Fresh>) {$/;"	f
handle	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    pub fn handle<H: Handler + 'static>(self, handler: H) -> ::Result<Listening> {$/;"	f
handle	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^fn handle<H, L>(mut server: Server<L>, handler: H, threads: usize) -> ::Result<Listening>$/;"	f
handle_connection	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    fn handle_connection<S>(&self, mut stream: &mut S) where S: NetworkStream + Clone {$/;"	f
handle_expect	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    fn handle_expect<W: Write>(&self, req: &Request, wrt: &mut W) -> bool {$/;"	f
handle_threads	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    pub fn handle_threads<H: Handler + 'static>(self, handler: H,$/;"	f
has	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    pub fn has<H: Header + HeaderFormat>(&self) -> bool {$/;"	f
has_body	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn has_body(&self) -> bool {$/;"	f
has_body	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn has_body(&self) -> bool {$/;"	f
has_body	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/message.rs	/^    fn has_body(&self) -> bool;$/;"	f
head	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    pub fn head<U: IntoUrl>(&self, url: U) -> RequestBuilder {$/;"	f
header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    pub fn header<H: Header + HeaderFormat>(mut self, header: H) -> RequestBuilder<'a> {$/;"	f
header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/mod.rs	/^macro_rules! header {$/;"	d
header_name	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/benches/client.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/access_control_allow_credentials.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/access_control_allow_origin.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/cache_control.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_disposition.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_length.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/cookie.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/expect.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/host.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/if_range.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/mod.rs	/^            fn header_name() -> &'static str {$/;"	f
header_name	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/pragma.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/range.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/set_cookie.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/strict_transport_security.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^        fn header_name() -> &'static str {$/;"	f
header_name	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn header_name() -> &'static str;$/;"	f
header_name	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^fn header_name<T: Header>() -> &'static str {$/;"	f
headers	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    pub fn headers(mut self, headers: Headers) -> RequestBuilder<'a> {$/;"	f
headers	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/request.rs	/^    pub fn headers(&self) -> &Headers { &self.headers }$/;"	f
headers	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^    pub fn headers(&self) -> &header::Headers { &*self.headers }$/;"	f
headers_mut	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/request.rs	/^    pub fn headers_mut(&mut self) -> &mut Headers { &mut self.headers }$/;"	f
headers_mut	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^    pub fn headers_mut(&mut self) -> &mut header::Headers { self.headers }$/;"	f
height	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    pub fn height(&self) -> usize {$/;"	f
hello	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/examples/hello.rs	/^fn hello(_: Request, res: Response) {$/;"	f
html	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_type.rs	/^    pub fn html() -> ContentType {$/;"	f
http	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    pub fn http<To: ToSocketAddrs>(addr: To) -> ::Result<Server<HttpListener>> {$/;"	f
https	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    pub fn https<A: ToSocketAddrs>(addr: A, ssl: S) -> ::Result<Server<HttpsListener<S>>> {$/;"	f
idempotent	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/method.rs	/^    pub fn idempotent(&self) -> bool {$/;"	f
including_subdomains	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/strict_transport_security.rs	/^    pub fn including_subdomains(max_age: u64) -> StrictTransportSecurity {$/;"	f
incoming	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn incoming(&mut self) -> NetworkConnections<Self> {$/;"	f
indent	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn indent(mut self, indent: u32) -> AsPrettyJson<'a, T> {$/;"	f
indents	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^        fn indents(source: &str) -> usize {$/;"	f
index	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn index(&self, idx: &str) -> &Json {$/;"	f
index	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn index<'a>(&'a self, idx: usize) -> &'a Json {$/;"	f
index_of	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn index_of(slice: &[u8], byte: u8) -> Option<usize> {$/;"	f
init	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    pub fn init(opts: InitOptions) -> Result<RustBox, InitError> {$/;"	f
inner	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^        fn inner<W: Write>(w: &mut W) -> io::Result<()> {$/;"	f
insert	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/cell.rs	/^    pub unsafe fn insert(&self, key: TypeId, val: Box<V>) {$/;"	f
inspect	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/lib.rs	/^macro_rules! inspect($/;"	d
into	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    fn into(self) -> Body<'a> {$/;"	f
into_inner	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/buffer.rs	/^    pub fn into_inner(self) -> R { self.inner }$/;"	f
into_inner	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    pub fn into_inner(self) -> Box<NetworkStream + Send> {$/;"	f
into_inner	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    pub fn into_inner(self) -> R {$/;"	f
into_inner	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    pub fn into_inner(self) -> T { self.obj.unwrap() }$/;"	f
into_inner	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    pub fn into_inner(self) -> W {$/;"	f
into_url	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    fn into_url(self) -> Result<Url, UrlError> {$/;"	f
into_url	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    fn into_url(self) -> Result<Url, UrlError>;$/;"	f
is	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    pub fn is<H: Header>(&self) -> bool {$/;"	f
is	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/message.rs	/^    pub fn is<T: Any>(&self) -> bool {$/;"	f
is	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    pub fn is<T: Any>(&self) -> bool {$/;"	f
is_array	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn is_array<'a>(&'a self) -> bool {$/;"	f
is_boolean	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn is_boolean(&self) -> bool {$/;"	f
is_client_error	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/status.rs	/^    pub fn is_client_error(&self) -> bool {$/;"	f
is_empty	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn is_empty(&self) -> bool { self.stack.is_empty() }$/;"	f
is_equal_to	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn is_equal_to(&self, rhs: &[StackElement]) -> bool {$/;"	f
is_f64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn is_f64(&self) -> bool {$/;"	f
is_i64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn is_i64(&self) -> bool {$/;"	f
is_informational	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/status.rs	/^    pub fn is_informational(&self) -> bool {$/;"	f
is_null	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn is_null(&self) -> bool {$/;"	f
is_number	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn is_number(&self) -> bool {$/;"	f
is_object	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn is_object<'a>(&'a self) -> bool {$/;"	f
is_redirection	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/status.rs	/^    pub fn is_redirection(&self) -> bool {$/;"	f
is_server_error	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/status.rs	/^    pub fn is_server_error(&self) -> bool {$/;"	f
is_strange_status	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/status.rs	/^    pub fn is_strange_status(&self) -> bool {$/;"	f
is_string	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn is_string<'a>(&'a self) -> bool {$/;"	f
is_success	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/status.rs	/^    pub fn is_success(&self) -> bool {$/;"	f
is_u64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn is_u64(&self) -> bool {$/;"	f
iter	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    pub fn iter(&self) -> HeadersItems {$/;"	f
jpeg	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_type.rs	/^    pub fn jpeg() -> ContentType {$/;"	f
json	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_type.rs	/^    pub fn json() -> ContentType {$/;"	f
keep_alive	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/connection.rs	/^    pub fn keep_alive() -> Connection {$/;"	f
keep_alive	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    pub fn keep_alive(&mut self, timeout: Option<Duration>) {$/;"	f
keep_alive_loop	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    fn keep_alive_loop<W: Write>(&self, mut rdr: &mut BufReader<&mut NetworkStream>,$/;"	f
key	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^fn key<T: Into<Scheme>>(host: &str, port: u16, scheme: T) -> Key {$/;"	f
last_event	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn last_event(src: &str) -> JsonEvent {$/;"	f
last_is_index	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn last_is_index(&self) -> bool {$/;"	f
len	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    pub fn len(&self) -> usize {$/;"	f
len	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn len(&self) -> usize { self.stack.len() }$/;"	f
lines	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^    macro_rules! lines {$/;"	d
local_addr	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn local_addr(&mut self) -> io::Result<SocketAddr> {$/;"	f
local_addr	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn local_addr(&mut self) -> io::Result<SocketAddr>;$/;"	f
main	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/examples/client.rs	/^fn main() {$/;"	f
main	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/examples/client_http2.rs	/^fn main() {$/;"	f
main	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/examples/headers.rs	/^fn main() {$/;"	f
main	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/examples/hello.rs	/^fn main() {$/;"	f
main	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/examples/server.rs	/^fn main() {$/;"	f
main	/Users/200246/development/Rust/bb_prs/src/main.rs	/^fn main() {$/;"	f
map_in_place	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    pub fn map_in_place<F>(&mut self, f: F) where F: FnOnce(T) -> T {$/;"	f
maybe_reserve	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/buffer.rs	/^    fn maybe_reserve(&mut self) {$/;"	f
method	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/request.rs	/^    pub fn method(&self) -> Method { self.method.clone() }$/;"	f
mk_object	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn mk_object(items: &[(string::String, Json)]) -> Json {$/;"	f
mock_connector	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^macro_rules! mock_connector ($/;"	d
mocked	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^    macro_rules! mocked {$/;"	d
mut_raw	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/item.rs	/^    pub fn mut_raw(&mut self) -> &mut Vec<Vec<u8>> {$/;"	f
name	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    pub fn name(&self) -> &'a str {$/;"	f
name	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/charset.rs	/^    fn name(&self) -> &str {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/benches/client.rs	/^    fn new() -> MockStream {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/buffer.rs	/^    pub fn new(rdr: R) -> BufReader<R> {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    pub fn new() -> Client {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^    pub fn new(config: Config) -> Pool<DefaultConnector> {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/request.rs	/^    pub fn new(method: Method, url: Url) -> ::Result<Request<Fresh>> {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/response.rs	/^    pub fn new(url: Url, stream: Box<NetworkStream + Send>) -> ::Result<Response> {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/upgrade.rs	/^    pub fn new(name: ProtocolName, version: Option<String>) -> Protocol {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/cell.rs	/^    pub fn new() -> PtrMapCell<V> {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/cell.rs	/^    pub fn new(val: Option<T>) -> OptCell<T> {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    pub fn new() -> Headers {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/entity.rs	/^    pub fn new(weak: bool, tag: String) -> EntityTag {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^    pub fn new(item: T, quality: Quality) -> QualityItem<T> {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn new(stream: Box<NetworkStream + Send>) -> Stream {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    pub fn new(obj: T) -> Wrapper<T> {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    pub fn new() -> MockHttp2Connector {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    pub fn new() -> MockStream {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    pub fn new(s: S) -> HttpsConnector<S> {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    pub fn new<To: ToSocketAddrs>(addr: To) -> ::Result<HttpListener> {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    pub fn new<To: ToSocketAddrs>(addr: To, ssl: S) -> ::Result<HttpsListener<S>> {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/listener.rs	/^    fn new(channel: mpsc::Sender<T>, data: T) -> Sentinel<T> {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/listener.rs	/^    pub fn new(acceptor: A) -> ListenerPool<A> {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    fn new(handler: H, timeouts: Timeouts) -> Worker<H> {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    pub fn new(listener: L) -> Server<L> {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/request.rs	/^    pub fn new(mut stream: &'a mut BufReader<&'b mut NetworkStream>, addr: SocketAddr)$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^    pub fn new(stream: &'a mut (Write + 'a), headers: &'a mut header::Headers) ->$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn new() -> Stack {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn new(json: Json) -> Decoder {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn new(rdr: T) -> Parser<T> {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn new(src: T) -> Builder<T> {$/;"	f
new	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn new(writer: &'a mut fmt::Write) -> Encoder<'a> {$/;"	f
new_client	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn new_client(&self, stream: S, host: String, scheme: HttpScheme)$/;"	f
new_http2_response	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    pub fn new_http2_response(status: &[u8], headers: &Headers, body: Option<Vec<u8>>)$/;"	f
new_message	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn new_message(&self, host: &str, port: u16, scheme: &str) -> ::Result<Box<HttpMessage>> {$/;"	f
new_message	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn new_message(&self, host: &str, port: u16, scheme: &str) -> ::Result<Box<HttpMessage>> {$/;"	f
new_message	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/message.rs	/^    fn new_message(&self, host: &str, port: u16, scheme: &str) -> ::Result<Box<HttpMessage>>;$/;"	f
new_pretty	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn new_pretty(writer: &'a mut fmt::Write) -> Encoder<'a> {$/;"	f
new_protocol	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^pub fn new_protocol() -> Http2Protocol<HttpConnector, HttpStream> {$/;"	f
new_raw	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/item.rs	/^    pub fn new_raw(data: Vec<Vec<u8>>) -> Item {$/;"	f
new_response_stream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    pub fn new_response_stream(&mut self, status: &[u8], headers: &Headers, body: Option<Vec<u8>>)$/;"	f
new_typed	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/item.rs	/^    pub fn new_typed(ty: Box<HeaderFormat + Send + Sync>) -> Item {$/;"	f
next	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn next(&mut self) -> Option<HeaderView<'a>> {$/;"	f
next	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn next(&mut self) -> Option<::Result<N::Stream>> {$/;"	f
next	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn next(&mut self) -> Option<JsonEvent> {$/;"	f
next_char	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn next_char(&mut self) -> Option<char> {$/;"	f
on_connection_end	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    fn on_connection_end(&self) { }$/;"	f
on_connection_start	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    fn on_connection_start(&self) { }$/;"	f
one	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/cell.rs	/^    pub unsafe fn one(&self) -> &V {$/;"	f
parse	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/item.rs	/^fn parse<H: Header + HeaderFormat>(raw: &Vec<Vec<u8>>) ->$/;"	f
parse	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^fn parse<R: Read, T: TryParse<Subject=I>, I>(rdr: &mut BufReader<R>) -> ::Result<Incoming<I>> {$/;"	f
parse	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn parse(&mut self) -> JsonEvent {$/;"	f
parse_array	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn parse_array(&mut self, first: bool) -> JsonEvent {$/;"	f
parse_array_comma_or_end	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn parse_array_comma_or_end(&mut self) -> Option<JsonEvent> {$/;"	f
parse_decimal	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn parse_decimal(&mut self, mut res: f64) -> Result<f64, ParserError> {$/;"	f
parse_exponent	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn parse_exponent(&mut self, mut res: f64) -> Result<f64, ParserError> {$/;"	f
parse_extended_value	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/parsing.rs	/^pub fn parse_extended_value(val: &str) -> ::Result<ExtendedValue> {$/;"	f
parse_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/benches/client.rs	/^    fn parse_header(_: &[Vec<u8>]) -> hyper::Result<Foo> {$/;"	f
parse_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/access_control_allow_credentials.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<AccessControlAllowCredentials> {$/;"	f
parse_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/access_control_allow_origin.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<AccessControlAllowOrigin> {$/;"	f
parse_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<Authorization<S>> {$/;"	f
parse_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/cache_control.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<CacheControl> {$/;"	f
parse_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_disposition.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<ContentDisposition> {$/;"	f
parse_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_length.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<ContentLength> {$/;"	f
parse_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/cookie.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<Cookie> {$/;"	f
parse_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/expect.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<Expect> {$/;"	f
parse_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/host.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<Host> {$/;"	f
parse_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/if_range.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<IfRange> {$/;"	f
parse_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/mod.rs	/^            fn parse_header(raw: &[Vec<u8>]) -> $crate::Result<Self> {$/;"	f
parse_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/pragma.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<Pragma> {$/;"	f
parse_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/range.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<Range> {$/;"	f
parse_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/set_cookie.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<SetCookie> {$/;"	f
parse_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/strict_transport_security.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<StrictTransportSecurity> {$/;"	f
parse_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^        fn parse_header(raw: &[Vec<u8>]) -> ::Result<CrazyLength> {$/;"	f
parse_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<Self>;$/;"	f
parse_headers	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^fn parse_headers(http2_headers: Vec<Http2Header>) -> ::Result<Headers> {$/;"	f
parse_ident	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn parse_ident(&mut self, ident: &str, value: JsonEvent) -> JsonEvent {$/;"	f
parse_number	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn parse_number(&mut self) -> JsonEvent {$/;"	f
parse_object	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn parse_object(&mut self, first: bool) -> JsonEvent {$/;"	f
parse_object_end	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn parse_object_end(&mut self) -> JsonEvent {$/;"	f
parse_option	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/connection.rs	/^    fn parse_option(header: Vec<u8>) -> Connection {$/;"	f
parse_request	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^pub fn parse_request<R: Read>(buf: &mut BufReader<R>) -> ::Result<Incoming<(Method, RequestUri)>> {$/;"	f
parse_response	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^pub fn parse_response<R: Read>(buf: &mut BufReader<R>) -> ::Result<Incoming<RawStatus>> {$/;"	f
parse_response	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^fn parse_response(response: ::solicit::http::Response) -> ::Result<(ResponseHead, Vec<u8>)> {$/;"	f
parse_start	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn parse_start(&mut self) -> JsonEvent {$/;"	f
parse_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn parse_str(&mut self) -> Result<string::String, ParserError> {$/;"	f
parse_u64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn parse_u64(&mut self) -> Result<u64, ParserError> {$/;"	f
parse_value	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn parse_value(&mut self) -> JsonEvent {$/;"	f
parse_whitespace	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn parse_whitespace(&mut self) {$/;"	f
partial_cmp	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^    fn partial_cmp(&self, other: &QualityItem<T>) -> Option<cmp::Ordering> {$/;"	f
partial_cmp	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/status.rs	/^    fn partial_cmp(&self, other: &StatusCode) -> Option<Ordering> {$/;"	f
patch	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    pub fn patch<U: IntoUrl>(&self, url: U) -> RequestBuilder {$/;"	f
peek_event	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    pub fn peek_event(&self, timeout: Duration, raw: bool) -> EventResult {$/;"	f
peel	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^macro_rules! peel {$/;"	d
peer_addr	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/benches/client.rs	/^    fn peer_addr(&mut self) -> io::Result<SocketAddr> {$/;"	f
peer_addr	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^    fn peer_addr(&mut self) -> io::Result<SocketAddr> {$/;"	f
peer_addr	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    fn peer_addr(&mut self) -> io::Result<SocketAddr> {$/;"	f
peer_addr	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^        fn peer_addr(&mut self) -> io::Result<SocketAddr> {$/;"	f
peer_addr	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn peer_addr(&mut self) -> io::Result<SocketAddr> {$/;"	f
peer_addr	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn peer_addr(&mut self) -> io::Result<SocketAddr>;$/;"	f
plaintext	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_type.rs	/^    pub fn plaintext() -> ContentType {$/;"	f
png	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_type.rs	/^    pub fn png() -> ContentType {$/;"	f
poll_event	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    pub fn poll_event(&self, raw: bool) -> EventResult {$/;"	f
pop	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn pop(&mut self) -> DecodeResult<Json> {$/;"	f
pop	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn pop(&mut self) {$/;"	f
post	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    pub fn post<U: IntoUrl>(&self, url: U) -> RequestBuilder {$/;"	f
prepare_body	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^fn prepare_body(body: Vec<u8>) -> Option<Vec<u8>> {$/;"	f
prepare_headers	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^fn prepare_headers(mut headers: Headers) -> Vec<Http2Header> {$/;"	f
prepare_path	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^fn prepare_path(url: Url) -> Vec<u8> {$/;"	f
present	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    pub fn present(&self) {$/;"	f
pretty	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn pretty(&self) -> PrettyJson {$/;"	f
previous_response_expected_no_content	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^    fn previous_response_expected_no_content(&self) -> bool {$/;"	f
previous_response_expected_no_content	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn previous_response_expected_no_content(&self) -> bool {$/;"	f
print	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    pub fn print(&self, x: usize, y: usize, sty: Style, fg: Color, bg: Color, s: &str) {$/;"	f
print_char	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    pub fn print_char(&self, x: usize, y: usize, sty: Style, fg: Color, bg: Color, ch: char) {$/;"	f
push_index	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn push_index(&mut self, index: u32) {$/;"	f
push_key	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn push_key(&mut self, key: string::String) {$/;"	f
put	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    pub fn put<U: IntoUrl>(&self, url: U) -> RequestBuilder {$/;"	f
q	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^pub fn q(f: f32) -> Quality {$/;"	f
qitem	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^pub fn qitem<T>(item: T) -> QualityItem<T> {$/;"	f
raw	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/item.rs	/^    pub fn raw(&self) -> &[Vec<u8>] {$/;"	f
raw	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    macro_rules! raw {$/;"	d
read	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/benches/client.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/buffer.rs	/^        fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/buffer.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/response.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^        fn read(s: &str, result: u64) {$/;"	f
read	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/request.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/uri.rs	/^    fn read(s: &str, result: RequestUri) {$/;"	f
read_bool	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn read_bool(&mut self) -> DecodeResult<bool> {$/;"	f
read_bool	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_bool(&mut self) -> Result<bool, Self::Error> { Err(()) }$/;"	f
read_bool	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_bool(&mut self) -> Result<bool, Self::Error>;$/;"	f
read_char	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn read_char(&mut self) -> DecodeResult<char> {$/;"	f
read_char	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_char(&mut self) -> Result<char, Self::Error> { Err(()) }$/;"	f
read_char	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_char(&mut self) -> Result<char, Self::Error>;$/;"	f
read_chunk_size	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^fn read_chunk_size<R: Read>(rdr: &mut R) -> io::Result<u64> {$/;"	f
read_enum	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn read_enum<T, F>(&mut self, _name: &str, f: F) -> DecodeResult<T> where$/;"	f
read_enum	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_enum<T, F>(&mut self, name: &str, f: F) -> Result<T, Self::Error>$/;"	f
read_enum	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_enum<T, F>(&mut self, name: &str, f: F) -> Result<T, Self::Error>$/;"	f
read_enum_struct_variant	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn read_enum_struct_variant<T, F>(&mut self, names: &[&str], f: F) -> DecodeResult<T> where$/;"	f
read_enum_struct_variant	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_enum_struct_variant<T, F>(&mut self, names: &[&str], f: F)$/;"	f
read_enum_struct_variant	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_enum_struct_variant<T, F>(&mut self, names: &[&str], f: F)$/;"	f
read_enum_struct_variant_field	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn read_enum_struct_variant_field<T, F>(&mut self,$/;"	f
read_enum_struct_variant_field	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_enum_struct_variant_field<T, F>(&mut self,$/;"	f
read_enum_struct_variant_field	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_enum_struct_variant_field<T, F>(&mut self,$/;"	f
read_enum_variant	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn read_enum_variant<T, F>(&mut self, names: &[&str],$/;"	f
read_enum_variant	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_enum_variant<T, F>(&mut self, names: &[&str], f: F)$/;"	f
read_enum_variant	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_enum_variant<T, F>(&mut self, names: &[&str], f: F)$/;"	f
read_enum_variant_arg	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn read_enum_variant_arg<T, F>(&mut self, _idx: usize, f: F) -> DecodeResult<T> where$/;"	f
read_enum_variant_arg	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_enum_variant_arg<T, F>(&mut self, a_idx: usize, f: F)$/;"	f
read_enum_variant_arg	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_enum_variant_arg<T, F>(&mut self, a_idx: usize, f: F)$/;"	f
read_err	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^        fn read_err(s: &str) {$/;"	f
read_f32	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn read_f32(&mut self) -> DecodeResult<f32> {$/;"	f
read_f32	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_f32(&mut self) -> Result<f32, Self::Error> { Err(()) }$/;"	f
read_f32	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_f32(&mut self) -> Result<f32, Self::Error>;$/;"	f
read_f64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn read_f64(&mut self) -> DecodeResult<f64> {$/;"	f
read_f64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_f64(&mut self) -> Result<f64, Self::Error> { Err(()) }$/;"	f
read_f64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_f64(&mut self) -> Result<f64, Self::Error>;$/;"	f
read_i16	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_i16(&mut self) -> Result<i16, Self::Error> { Err(()) }$/;"	f
read_i16	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_i16(&mut self) -> Result<i16, Self::Error>;$/;"	f
read_i32	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_i32(&mut self) -> Result<i32, Self::Error> { Err(()) }$/;"	f
read_i32	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_i32(&mut self) -> Result<i32, Self::Error>;$/;"	f
read_i64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_i64(&mut self) -> Result<i64, Self::Error> { Err(()) }$/;"	f
read_i64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_i64(&mut self) -> Result<i64, Self::Error>;$/;"	f
read_i8	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_i8(&mut self) -> Result<i8, Self::Error> { Err(()) }$/;"	f
read_i8	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_i8(&mut self) -> Result<i8, Self::Error>;$/;"	f
read_into_buf	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/buffer.rs	/^    pub fn read_into_buf(&mut self) -> io::Result<usize> {$/;"	f
read_isize	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_isize(&mut self) -> Result<isize, Self::Error> { Err(()) }$/;"	f
read_isize	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_isize(&mut self) -> Result<isize, Self::Error>;$/;"	f
read_map	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn read_map<T, F>(&mut self, f: F) -> DecodeResult<T> where$/;"	f
read_map	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_map<T, F>(&mut self, f: F) -> Result<T, Self::Error>$/;"	f
read_map	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_map<T, F>(&mut self, f: F) -> Result<T, Self::Error>$/;"	f
read_map_elt_key	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn read_map_elt_key<T, F>(&mut self, _idx: usize, f: F) -> DecodeResult<T> where$/;"	f
read_map_elt_key	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_map_elt_key<T, F>(&mut self, idx: usize, f: F)$/;"	f
read_map_elt_key	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_map_elt_key<T, F>(&mut self, idx: usize, f: F)$/;"	f
read_map_elt_val	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn read_map_elt_val<T, F>(&mut self, _idx: usize, f: F) -> DecodeResult<T> where$/;"	f
read_map_elt_val	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_map_elt_val<T, F>(&mut self, idx: usize, f: F)$/;"	f
read_map_elt_val	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_map_elt_val<T, F>(&mut self, idx: usize, f: F)$/;"	f
read_nil	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn read_nil(&mut self) -> DecodeResult<()> {$/;"	f
read_nil	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_nil(&mut self) -> Result<(), Self::Error> { Err(()) }$/;"	f
read_nil	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_nil(&mut self) -> Result<(), Self::Error>;$/;"	f
read_option	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn read_option<T, F>(&mut self, mut f: F) -> DecodeResult<T> where$/;"	f
read_option	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_option<T, F>(&mut self, f: F) -> Result<T, Self::Error>$/;"	f
read_option	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_option<T, F>(&mut self, f: F) -> Result<T, Self::Error>$/;"	f
read_primitive	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^macro_rules! read_primitive {$/;"	d
read_seq	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn read_seq<T, F>(&mut self, f: F) -> DecodeResult<T> where$/;"	f
read_seq	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_seq<T, F>(&mut self, f: F) -> Result<T, Self::Error>$/;"	f
read_seq	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_seq<T, F>(&mut self, f: F) -> Result<T, Self::Error>$/;"	f
read_seq_elt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn read_seq_elt<T, F>(&mut self, _idx: usize, f: F) -> DecodeResult<T> where$/;"	f
read_seq_elt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_seq_elt<T, F>(&mut self, idx: usize, f: F) -> Result<T, Self::Error>$/;"	f
read_seq_elt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_seq_elt<T, F>(&mut self, idx: usize, f: F) -> Result<T, Self::Error>$/;"	f
read_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn read_str(&mut self) -> DecodeResult<string::String> {$/;"	f
read_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_str(&mut self) -> Result<String, Self::Error> { Err(()) }$/;"	f
read_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_str(&mut self) -> Result<String, Self::Error>;$/;"	f
read_struct	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn read_struct<T, F>(&mut self, _name: &str, _len: usize, f: F) -> DecodeResult<T> where$/;"	f
read_struct	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_struct<T, F>(&mut self, s_name: &str, len: usize, f: F)$/;"	f
read_struct	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_struct<T, F>(&mut self, s_name: &str, len: usize, f: F)$/;"	f
read_struct_field	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn read_struct_field<T, F>(&mut self,$/;"	f
read_struct_field	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_struct_field<T, F>(&mut self,$/;"	f
read_struct_field	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_struct_field<T, F>(&mut self,$/;"	f
read_to_string	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/response.rs	/^    fn read_to_string(mut r: Response) -> io::Result<String> {$/;"	f
read_to_string	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/request.rs	/^    fn read_to_string(mut req: Request) -> io::Result<String> {$/;"	f
read_to_vec	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_to_vec<T, F>(&mut self, f: F)$/;"	f
read_to_vec	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_to_vec<T, F>(&mut self, mut f: F) -> Result<Vec<T>, D::Error> where F:$/;"	f
read_tuple	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn read_tuple<T, F>(&mut self, tuple_len: usize, f: F) -> DecodeResult<T> where$/;"	f
read_tuple	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_tuple<T, F>(&mut self, len: usize, f: F) -> Result<T, Self::Error>$/;"	f
read_tuple	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_tuple<T, F>(&mut self, len: usize, f: F) -> Result<T, Self::Error>$/;"	f
read_tuple_arg	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn read_tuple_arg<T, F>(&mut self, idx: usize, f: F) -> DecodeResult<T> where$/;"	f
read_tuple_arg	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_tuple_arg<T, F>(&mut self, a_idx: usize, f: F)$/;"	f
read_tuple_arg	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_tuple_arg<T, F>(&mut self, a_idx: usize, f: F)$/;"	f
read_tuple_struct	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn read_tuple_struct<T, F>(&mut self,$/;"	f
read_tuple_struct	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_tuple_struct<T, F>(&mut self, s_name: &str, len: usize, f: F)$/;"	f
read_tuple_struct	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_tuple_struct<T, F>(&mut self, s_name: &str, len: usize, f: F)$/;"	f
read_tuple_struct_arg	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn read_tuple_struct_arg<T, F>(&mut self,$/;"	f
read_tuple_struct_arg	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_tuple_struct_arg<T, F>(&mut self, a_idx: usize, f: F)$/;"	f
read_tuple_struct_arg	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_tuple_struct_arg<T, F>(&mut self, a_idx: usize, f: F)$/;"	f
read_u16	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_u16(&mut self) -> Result<u16, Self::Error> { Err(()) }$/;"	f
read_u16	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_u16(&mut self) -> Result<u16, Self::Error>;$/;"	f
read_u32	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_u32(&mut self) -> Result<u32, Self::Error> { Err(()) }$/;"	f
read_u32	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_u32(&mut self) -> Result<u32, Self::Error>;$/;"	f
read_u64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_u64(&mut self) -> Result<u64, Self::Error> { Err(()) }$/;"	f
read_u64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_u64(&mut self) -> Result<u64, Self::Error>;$/;"	f
read_u8	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_u8(&mut self) -> Result<u8, Self::Error> { Err(()) }$/;"	f
read_u8	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_u8(&mut self) -> Result<u8, Self::Error>;$/;"	f
read_usize	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^        fn read_usize(&mut self) -> Result<usize, Self::Error> { Err(()) }$/;"	f
read_usize	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^    fn read_usize(&mut self) -> Result<usize, Self::Error>;$/;"	f
reader_mut	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn reader_mut(&mut self) -> Option<&mut HttpReader<BufReader<Box<NetworkStream + Send>>>> {$/;"	f
reader_ref	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn reader_ref(&self) -> Option<&HttpReader<BufReader<Box<NetworkStream + Send>>>> {$/;"	f
remove	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    pub fn remove<H: Header + HeaderFormat>(&mut self) -> bool {$/;"	f
remove_raw	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    pub fn remove_raw(&mut self, name: &str) {$/;"	f
request	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    pub fn request<U: IntoUrl>(&self, method: Method, url: U) -> RequestBuilder {$/;"	f
reuse	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^    fn reuse(&mut self, key: Key, conn: PooledStreamInner<S>) {$/;"	f
run	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    pub fn run() -> Option<RunningGuard> {$/;"	f
run_request	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/request.rs	/^    fn run_request(req: Request<Fresh>) -> Vec<u8> {$/;"	f
running	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    pub fn running() -> bool {$/;"	f
safe	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/method.rs	/^    pub fn safe(&self) -> bool {$/;"	f
scheme	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^	fn scheme() -> Option<&'static str> {$/;"	f
scheme	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^    fn scheme() -> Option<&'static str> {$/;"	f
scheme	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^    fn scheme() -> Option<&'static str>;$/;"	f
search	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn search<'a>(&'a self, key: &str) -> Option<&'a Json> {$/;"	f
send	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    pub fn send(self) -> ::Result<Response> {$/;"	f
send	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/request.rs	/^    pub fn send(self) -> ::Result<Response> {$/;"	f
send	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^    pub fn send(mut self, body: &[u8]) -> io::Result<()> {$/;"	f
send_request	/Users/200246/development/Rust/bb_prs/src/main.rs	/^fn send_request() -> Result<String, &'static str> {$/;"	f
serialize	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/mod.rs	/^            fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error>$/;"	f
serialize	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error> where S: Serializer {$/;"	f
serialize	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/mod.rs	/^    fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error> where S: Serializer {$/;"	f
serialize	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/method.rs	/^    fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error> where S: Serializer {$/;"	f
set	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/cell.rs	/^    pub fn set(&self, val: T) {$/;"	f
set	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    pub fn set<H: Header + HeaderFormat>(&mut self, value: H) {$/;"	f
set_cursor	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    pub fn set_cursor(&self, x: isize, y: isize) {$/;"	f
set_indent	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn set_indent(&mut self, new_indent: u32) -> Result<(), ()> {$/;"	f
set_input_mode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    pub fn set_input_mode(&self, mode: InputMode) {$/;"	f
set_outgoing	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn set_outgoing(&mut self, mut head: RequestHead) -> ::Result<RequestHead> {$/;"	f
set_outgoing	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn set_outgoing(&mut self, head: RequestHead) -> ::Result<RequestHead> {$/;"	f
set_outgoing	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/message.rs	/^    fn set_outgoing(&mut self, head: RequestHead) -> ::Result<RequestHead>;$/;"	f
set_output_mode	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    pub fn set_output_mode(&mut self, mode: OutputMode) {$/;"	f
set_previous_response_expected_no_content	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^    fn set_previous_response_expected_no_content(&mut self, expected: bool) {$/;"	f
set_previous_response_expected_no_content	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn set_previous_response_expected_no_content(&mut self, _expected: bool) { }$/;"	f
set_raw	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    pub fn set_raw<K: Into<Cow<'static, str>> + fmt::Debug>(&mut self, name: K,$/;"	f
set_read_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/benches/client.rs	/^    fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {$/;"	f
set_read_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    pub fn set_read_timeout(&mut self, dur: Option<Duration>) {$/;"	f
set_read_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^    fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_read_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/request.rs	/^    pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_read_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_read_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn set_read_timeout(&self, _dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_read_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/message.rs	/^    fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()>;$/;"	f
set_read_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_read_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^        fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_read_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_read_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()>;$/;"	f
set_read_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    fn set_read_timeout(&self, s: &NetworkStream, timeout: Option<Duration>) -> io::Result<()> {$/;"	f
set_read_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    pub fn set_read_timeout(&mut self, dur: Option<Duration>) {$/;"	f
set_read_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/request.rs	/^    pub fn set_read_timeout(&self, timeout: Option<Duration>) -> io::Result<()> {$/;"	f
set_redirect_policy	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    pub fn set_redirect_policy(&mut self, policy: RedirectPolicy) {$/;"	f
set_tag	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/entity.rs	/^    pub fn set_tag(&mut self, tag: String) {$/;"	f
set_timeouts	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    fn set_timeouts(&self, s: &NetworkStream) -> io::Result<()> {$/;"	f
set_write_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/benches/client.rs	/^    fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {$/;"	f
set_write_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    pub fn set_write_timeout(&mut self, dur: Option<Duration>) {$/;"	f
set_write_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^    fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_write_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/request.rs	/^    pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_write_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_write_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn set_write_timeout(&self, _dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_write_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/message.rs	/^    fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()>;$/;"	f
set_write_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_write_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^        fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_write_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_write_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()>;$/;"	f
set_write_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    fn set_write_timeout(&self, s: &NetworkStream, timeout: Option<Duration>) -> io::Result<()> {$/;"	f
set_write_timeout	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    pub fn set_write_timeout(&mut self, dur: Option<Duration>) {$/;"	f
should_have_response_body	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^fn should_have_response_body(method: &Method, status: u16) -> bool {$/;"	f
should_keep_alive	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/mod.rs	/^pub fn should_keep_alive(version: HttpVersion, headers: &Headers) -> bool {$/;"	f
size	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    fn size(&self) -> Option<u64> {$/;"	f
sock	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/request.rs	/^    fn sock(s: &str) -> SocketAddr {$/;"	f
spaces	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^fn spaces(wr: &mut fmt::Write, n: u32) -> EncodeResult<()> {$/;"	f
spawn_with	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/listener.rs	/^fn spawn_with<A, F>(supervisor: mpsc::Sender<()>, work: Arc<F>, mut acceptor: A)$/;"	f
split_in_two	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_range.rs	/^fn split_in_two(s: &str, separator: char) -> Option<(&str, &str)> {$/;"	f
ssl	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/request.rs	/^    pub fn ssl<T: NetworkStream>(&self) -> Option<&T> {$/;"	f
stack	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn stack<'l>(&'l self) -> &'l Stack {$/;"	f
start	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/request.rs	/^    pub fn start(mut self) -> ::Result<Request<Streaming>> {$/;"	f
start	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^    pub fn start(mut self) -> io::Result<Response<'a, Streaming>> {$/;"	f
starts_with	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn starts_with(&self, rhs: &[StackElement]) -> bool {$/;"	f
status	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^    pub fn status(&self) -> status::StatusCode { self.status }$/;"	f
status_mut	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^    pub fn status_mut(&mut self) -> &mut status::StatusCode { &mut self.status }$/;"	f
status_raw	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/response.rs	/^    pub fn status_raw(&self) -> &RawStatus {$/;"	f
strong	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/entity.rs	/^    pub fn strong(tag: String) -> EntityTag {$/;"	f
strong_eq	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/entity.rs	/^    pub fn strong_eq(&self, other: &EntityTag) -> bool {$/;"	f
strong_ne	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/entity.rs	/^    pub fn strong_ne(&self, other: &EntityTag) -> bool {$/;"	f
tag	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/entity.rs	/^    pub fn tag(&self) -> &str {$/;"	f
take_request	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn take_request(&mut self) -> Option<Http2Request> {$/;"	f
test2	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/vary.rs	/^        fn test2() {$/;"	f
test3	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/upgrade.rs	/^        fn test3() {$/;"	f
test_accept	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn test_accept() {$/;"	f
test_as_array	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_as_array(){$/;"	f
test_as_boolean	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_as_boolean(){$/;"	f
test_as_f64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_as_f64(){$/;"	f
test_as_i64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_as_i64(){$/;"	f
test_as_null	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_as_null(){$/;"	f
test_as_object	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_as_object(){$/;"	f
test_as_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/method.rs	/^    fn test_as_str() {$/;"	f
test_as_string	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_as_string(){$/;"	f
test_as_u64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_as_u64(){$/;"	f
test_asctime	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/httpdate.rs	/^    fn test_asctime() {$/;"	f
test_bad_json_stack_depleted	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_bad_json_stack_depleted() {$/;"	f
test_base64_random	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^    fn test_base64_random() {$/;"	f
test_basic_auth	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^    fn test_basic_auth() {$/;"	f
test_basic_auth_no_password	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^    fn test_basic_auth_no_password() {$/;"	f
test_basic_auth_parse	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^    fn test_basic_auth_parse() {$/;"	f
test_basic_auth_parse_no_password	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^    fn test_basic_auth_parse_no_password() {$/;"	f
test_bearer_auth	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^    fn test_bearer_auth() {$/;"	f
test_bearer_auth_parse	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^    fn test_bearer_auth_parse() {$/;"	f
test_cause	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/error.rs	/^    fn test_cause() {$/;"	f
test_check_continue_default	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    fn test_check_continue_default() {$/;"	f
test_check_continue_reject	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^    fn test_check_continue_reject() {$/;"	f
test_chunk_size_with_extension	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/response.rs	/^    fn test_chunk_size_with_extension() {$/;"	f
test_chunk_size_with_extension	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/request.rs	/^    fn test_chunk_size_with_extension() {$/;"	f
test_clear	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn test_clear() {$/;"	f
test_closed	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^    fn test_closed() {$/;"	f
test_cmp	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/entity.rs	/^    fn test_cmp() {$/;"	f
test_connect_and_drop	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^    fn test_connect_and_drop() {$/;"	f
test_consume_and_get_buf	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/buffer.rs	/^    fn test_consume_and_get_buf() {$/;"	f
test_content_type	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn test_content_type() {$/;"	f
test_decode_array	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_decode_array() {$/;"	f
test_decode_enum	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_decode_enum() {$/;"	f
test_decode_errors_enum	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_decode_errors_enum() {$/;"	f
test_decode_errors_struct	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_decode_errors_struct() {$/;"	f
test_decode_identifiers	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_decode_identifiers() {$/;"	f
test_decode_map	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_decode_map() {$/;"	f
test_decode_numbers	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_decode_numbers() {$/;"	f
test_decode_option	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_decode_option() {$/;"	f
test_decode_option_malformed	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_decode_option_malformed() {$/;"	f
test_decode_option_none	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_decode_option_none() {$/;"	f
test_decode_option_some	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_decode_option_some() {$/;"	f
test_decode_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_decode_str() {$/;"	f
test_decode_struct	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_decode_struct() {$/;"	f
test_decode_struct_with_nan	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_decode_struct_with_nan() {$/;"	f
test_decode_tuple	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_decode_tuple() {$/;"	f
test_decode_tuple_malformed_length	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_decode_tuple_malformed_length() {$/;"	f
test_decode_tuple_malformed_types	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_decode_tuple_malformed_types() {$/;"	f
test_different_reads	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn test_different_reads() {$/;"	f
test_different_structs_for_same_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn test_different_structs_for_same_header() {$/;"	f
test_display	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_disposition.rs	/^    fn test_display() {$/;"	f
test_display	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/charset.rs	/^fn test_display() {$/;"	f
test_downcast_box_stream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn test_downcast_box_stream() {$/;"	f
test_downcast_unchecked_box_stream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn test_downcast_unchecked_box_stream() {$/;"	f
test_encode_decode_phantom_data	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_encode_decode_phantom_data() {$/;"	f
test_encode_hashmap_with_arbitrary_key	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_encode_hashmap_with_arbitrary_key() {$/;"	f
test_encode_hashmap_with_numeric_key	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_encode_hashmap_with_numeric_key() {$/;"	f
test_eof_closes	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^    fn test_eof_closes() {$/;"	f
test_eq	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn test_eq() {$/;"	f
test_etag_fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/entity.rs	/^    fn test_etag_fmt() {$/;"	f
test_etag_parse_failures	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/entity.rs	/^    fn test_etag_parse_failures() {$/;"	f
test_etag_parse_success	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/entity.rs	/^    fn test_etag_parse_success() {$/;"	f
test_find	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_find(){$/;"	f
test_find_path	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_find_path(){$/;"	f
test_fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/cookie.rs	/^fn test_fmt() {$/;"	f
test_fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/range.rs	/^fn test_fmt() {$/;"	f
test_fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/set_cookie.rs	/^fn test_fmt() {$/;"	f
test_fmt	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/method.rs	/^    fn test_fmt() {$/;"	f
test_fmt_extended_value_with_encoding	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/parsing.rs	/^    fn test_fmt_extended_value_with_encoding() {$/;"	f
test_fmt_extended_value_with_encoding_and_language_tag	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/parsing.rs	/^    fn test_fmt_extended_value_with_encoding_and_language_tag() {$/;"	f
test_fresh_drop	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^    fn test_fresh_drop() {$/;"	f
test_fresh_drop_panicing	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^    fn test_fresh_drop_panicing() {$/;"	f
test_fresh_start	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^    fn test_fresh_start() {$/;"	f
test_from	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/error.rs	/^    fn test_from() {$/;"	f
test_from_base64_basic	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^    fn test_from_base64_basic() {$/;"	f
test_from_base64_bytes	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^    fn test_from_base64_bytes() {$/;"	f
test_from_base64_invalid_char	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^    fn test_from_base64_invalid_char() {$/;"	f
test_from_base64_invalid_padding	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^    fn test_from_base64_invalid_padding() {$/;"	f
test_from_base64_newlines	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^    fn test_from_base64_newlines() {$/;"	f
test_from_base64_urlsafe	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^    fn test_from_base64_urlsafe() {$/;"	f
test_from_hex_all_bytes	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs	/^    pub fn test_from_hex_all_bytes() {$/;"	f
test_from_hex_ignores_whitespace	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs	/^    pub fn test_from_hex_ignores_whitespace() {$/;"	f
test_from_hex_invalid_char	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs	/^    pub fn test_from_hex_invalid_char() {$/;"	f
test_from_hex_odd_len	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs	/^    pub fn test_from_hex_odd_len() {$/;"	f
test_from_hex_okay	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs	/^    pub fn test_from_hex_okay() {$/;"	f
test_from_raw	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn test_from_raw() {$/;"	f
test_from_ssl	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/error.rs	/^    fn test_from_ssl() {$/;"	f
test_from_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/method.rs	/^    fn test_from_str() {$/;"	f
test_from_str_trait	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_from_str_trait() {$/;"	f
test_get_empty_body	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/request.rs	/^    fn test_get_empty_body() {$/;"	f
test_get_empty_body	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/request.rs	/^    fn test_get_empty_body() {$/;"	f
test_get_mutable	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn test_get_mutable() {$/;"	f
test_get_with_body	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/request.rs	/^    fn test_get_with_body() {$/;"	f
test_hashable	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/method.rs	/^    fn test_hashable() {$/;"	f
test_hashmap_with_enum_key	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_hashmap_with_enum_key() {$/;"	f
test_hashmap_with_numeric_key_can_handle_double_quote_delimited_key	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_hashmap_with_numeric_key_can_handle_double_quote_delimited_key() {$/;"	f
test_hashmap_with_numeric_key_will_error_with_string_keys	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_hashmap_with_numeric_key_will_error_with_string_keys() {$/;"	f
test_head_empty_body	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/request.rs	/^    fn test_head_empty_body() {$/;"	f
test_head_empty_body	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/request.rs	/^    fn test_head_empty_body() {$/;"	f
test_head_response_body_keep_alive	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    fn test_head_response_body_keep_alive() {$/;"	f
test_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/mod.rs	/^macro_rules! test_header {$/;"	d
test_headers_show	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn test_headers_show() {$/;"	f
test_headers_show_raw	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn test_headers_show_raw() {$/;"	f
test_host	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/host.rs	/^    fn test_host() {$/;"	f
test_http2_message_not_readable	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn test_http2_message_not_readable() {$/;"	f
test_http2_message_not_writable	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn test_http2_message_not_writable() {$/;"	f
test_http2_parse_headers	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn test_http2_parse_headers() {$/;"	f
test_http2_parse_headers_invalid_name	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn test_http2_parse_headers_invalid_name() {$/;"	f
test_http2_parse_headers_with_cookie	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn test_http2_parse_headers_with_cookie() {$/;"	f
test_http2_parse_headers_with_set_cookie	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn test_http2_parse_headers_with_set_cookie() {$/;"	f
test_http2_parse_response_no_body	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn test_http2_parse_response_no_body() {$/;"	f
test_http2_parse_response_no_status_code	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn test_http2_parse_response_no_status_code() {$/;"	f
test_http2_parse_response_with_body	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn test_http2_parse_response_with_body() {$/;"	f
test_http2_prepapre_headers_with_cookie	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn test_http2_prepapre_headers_with_cookie() {$/;"	f
test_http2_prepare_headers	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn test_http2_prepare_headers() {$/;"	f
test_http2_prepare_headers_with_set_cookie	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn test_http2_prepare_headers_with_set_cookie() {$/;"	f
test_http2_request_no_body	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn test_http2_request_no_body() {$/;"	f
test_http2_request_with_body	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn test_http2_request_with_body() {$/;"	f
test_http2_response_empty_body	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn test_http2_response_empty_body() {$/;"	f
test_http2_response_headers	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn test_http2_response_headers() {$/;"	f
test_http2_response_no_body	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn test_http2_response_no_body() {$/;"	f
test_http2_response_with_body	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn test_http2_response_with_body() {$/;"	f
test_idempotent	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/method.rs	/^    fn test_idempotent() {$/;"	f
test_if_none_match	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/if_none_match.rs	/^    fn test_if_none_match() {$/;"	f
test_imf_fixdate	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/httpdate.rs	/^    fn test_imf_fixdate() {$/;"	f
test_index	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_index(){$/;"	f
test_into_inner	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/response.rs	/^    fn test_into_inner() {$/;"	f
test_invalid_chunk_size_extension	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/response.rs	/^    fn test_invalid_chunk_size_extension() {$/;"	f
test_invalid_chunk_size_extension	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/request.rs	/^    fn test_invalid_chunk_size_extension() {$/;"	f
test_invalid_chunk_size_not_hex_digit	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/response.rs	/^    fn test_invalid_chunk_size_not_hex_digit() {$/;"	f
test_invalid_chunk_size_not_hex_digit	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/request.rs	/^    fn test_invalid_chunk_size_not_hex_digit() {$/;"	f
test_is_array	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_is_array(){$/;"	f
test_is_boolean	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_is_boolean(){$/;"	f
test_is_f64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_is_f64(){$/;"	f
test_is_i64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_is_i64(){$/;"	f
test_is_null	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_is_null(){$/;"	f
test_is_number	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_is_number(){$/;"	f
test_is_object	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_is_object(){$/;"	f
test_is_string	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_is_string(){$/;"	f
test_is_u64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_is_u64(){$/;"	f
test_iter	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn test_iter() {$/;"	f
test_len	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn test_len() {$/;"	f
test_message_get_incoming_invalid_content_length	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn test_message_get_incoming_invalid_content_length() {$/;"	f
test_multiline_errors	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_multiline_errors() {$/;"	f
test_multiple_reads	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn test_multiple_reads() {$/;"	f
test_negative_zero	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_negative_zero() {$/;"	f
test_no_content	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^    fn test_no_content() {$/;"	f
test_no_date	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/httpdate.rs	/^    fn test_no_date() {$/;"	f
test_opt_cell_clone	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/cell.rs	/^    fn test_opt_cell_clone() {$/;"	f
test_opt_cell_set	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/cell.rs	/^    fn test_opt_cell_set() {$/;"	f
test_parse	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/connection.rs	/^    fn test_parse() {$/;"	f
test_parse	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/cookie.rs	/^fn test_parse() {$/;"	f
test_parse	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/set_cookie.rs	/^fn test_parse() {$/;"	f
test_parse	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/charset.rs	/^fn test_parse() {$/;"	f
test_parse_argument	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/cache_control.rs	/^    fn test_parse_argument() {$/;"	f
test_parse_bad_syntax	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/cache_control.rs	/^    fn test_parse_bad_syntax() {$/;"	f
test_parse_bytes_range_valid	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/range.rs	/^fn test_parse_bytes_range_valid() {$/;"	f
test_parse_chunked_request	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/request.rs	/^    fn test_parse_chunked_request() {$/;"	f
test_parse_chunked_response	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/response.rs	/^    fn test_parse_chunked_response() {$/;"	f
test_parse_duplicate_directives	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/strict_transport_security.rs	/^    fn test_parse_duplicate_directives() {$/;"	f
test_parse_error_closes	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/response.rs	/^    fn test_parse_error_closes() {$/;"	f
test_parse_extended_value_missing_language_tag_and_encoding	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/parsing.rs	/^    fn test_parse_extended_value_missing_language_tag_and_encoding() {$/;"	f
test_parse_extended_value_partially_formatted	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/parsing.rs	/^    fn test_parse_extended_value_partially_formatted() {$/;"	f
test_parse_extended_value_partially_formatted_blank	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/parsing.rs	/^    fn test_parse_extended_value_partially_formatted_blank() {$/;"	f
test_parse_extended_value_with_encoding	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/parsing.rs	/^    fn test_parse_extended_value_with_encoding() {$/;"	f
test_parse_extended_value_with_encoding_and_language_tag	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/parsing.rs	/^    fn test_parse_extended_value_with_encoding_and_language_tag() {$/;"	f
test_parse_extension	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/cache_control.rs	/^    fn test_parse_extension() {$/;"	f
test_parse_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/content_disposition.rs	/^    fn test_parse_header() {$/;"	f
test_parse_header	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/pragma.rs	/^fn test_parse_header() {$/;"	f
test_parse_include_subdomains	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/strict_transport_security.rs	/^    fn test_parse_include_subdomains() {$/;"	f
test_parse_incoming	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn test_parse_incoming() {$/;"	f
test_parse_invalid	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/range.rs	/^fn test_parse_invalid() {$/;"	f
test_parse_max_age	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/strict_transport_security.rs	/^    fn test_parse_max_age() {$/;"	f
test_parse_max_age_nan	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/strict_transport_security.rs	/^    fn test_parse_max_age_nan() {$/;"	f
test_parse_max_age_no_value	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/strict_transport_security.rs	/^    fn test_parse_max_age_no_value() {$/;"	f
test_parse_multiple_headers	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/cache_control.rs	/^    fn test_parse_multiple_headers() {$/;"	f
test_parse_no_max_age	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/strict_transport_security.rs	/^    fn test_parse_no_max_age() {$/;"	f
test_parse_quote_form	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/cache_control.rs	/^    fn test_parse_quote_form() {$/;"	f
test_parse_quoted_max_age	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/strict_transport_security.rs	/^    fn test_parse_quoted_max_age() {$/;"	f
test_parse_raw_status	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn test_parse_raw_status() {$/;"	f
test_parse_spaces_max_age	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/strict_transport_security.rs	/^    fn test_parse_spaces_max_age() {$/;"	f
test_parse_tcp_closed	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn test_parse_tcp_closed() {$/;"	f
test_parse_unregistered_range_valid	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/range.rs	/^fn test_parse_unregistered_range_valid() {$/;"	f
test_post_chunked	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/request.rs	/^    fn test_post_chunked() {$/;"	f
test_post_chunked_with_encoding	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/request.rs	/^    fn test_post_chunked_with_encoding() {$/;"	f
test_post_content_length	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/request.rs	/^    fn test_post_content_length() {$/;"	f
test_post_empty_body	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/request.rs	/^    fn test_post_empty_body() {$/;"	f
test_prettyencode_hashmap_with_numeric_key	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_prettyencode_hashmap_with_numeric_key() {$/;"	f
test_prettyencoder_indent_level_param	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_prettyencoder_indent_level_param() {$/;"	f
test_ptr_map_cell_clone	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/cell.rs	/^    fn test_ptr_map_cell_clone() {$/;"	f
test_ptr_map_cell_many	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/cell.rs	/^    fn test_ptr_map_cell_many() {$/;"	f
test_ptr_map_cell_none	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/cell.rs	/^    fn test_ptr_map_cell_none() {$/;"	f
test_ptr_map_cell_one	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/cell.rs	/^    fn test_ptr_map_cell_one() {$/;"	f
test_ptr_map_cell_two	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/cell.rs	/^    fn test_ptr_map_cell_two() {$/;"	f
test_quality	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^    fn test_quality() {$/;"	f
test_quality2	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^    fn test_quality2() {$/;"	f
test_quality_invalid	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^    fn test_quality_invalid() {$/;"	f
test_quality_invalid2	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^    fn test_quality_invalid2() {$/;"	f
test_quality_item_from_str1	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^    fn test_quality_item_from_str1() {$/;"	f
test_quality_item_from_str2	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^    fn test_quality_item_from_str2() {$/;"	f
test_quality_item_from_str3	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^    fn test_quality_item_from_str3() {$/;"	f
test_quality_item_from_str4	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^    fn test_quality_item_from_str4() {$/;"	f
test_quality_item_from_str5	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^    fn test_quality_item_from_str5() {$/;"	f
test_quality_item_from_str6	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^    fn test_quality_item_from_str6() {$/;"	f
test_quality_item_ordering	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^    fn test_quality_item_ordering() {$/;"	f
test_quality_item_show1	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^    fn test_quality_item_show1() {$/;"	f
test_quality_item_show2	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^    fn test_quality_item_show2() {$/;"	f
test_quality_item_show3	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/quality_item.rs	/^    fn test_quality_item_show3() {$/;"	f
test_raw_auth	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^    fn test_raw_auth() {$/;"	f
test_raw_auth_parse	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/authorization.rs	/^    fn test_raw_auth_parse() {$/;"	f
test_read_array	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_read_array() {$/;"	f
test_read_array_streaming	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_read_array_streaming() {$/;"	f
test_read_chunk_size	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn test_read_chunk_size() {$/;"	f
test_read_chunked_early_eof	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn test_read_chunked_early_eof() {$/;"	f
test_read_identifiers	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_read_identifiers() {$/;"	f
test_read_identifiers_streaming	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_read_identifiers_streaming() {$/;"	f
test_read_number	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_read_number() {$/;"	f
test_read_object	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_read_object() {$/;"	f
test_read_object_streaming	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_read_object_streaming() {$/;"	f
test_read_sized_early_eof	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn test_read_sized_early_eof() {$/;"	f
test_read_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_read_str() {$/;"	f
test_redirect_dontfollow	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    fn test_redirect_dontfollow() {$/;"	f
test_redirect_followall	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    fn test_redirect_followall() {$/;"	f
test_redirect_followif	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    fn test_redirect_followif() {$/;"	f
test_remove_raw	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn test_remove_raw() {$/;"	f
test_resize	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/buffer.rs	/^    fn test_resize() {$/;"	f
test_rfc_850	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/httpdate.rs	/^    fn test_rfc_850() {$/;"	f
test_safe	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/method.rs	/^    fn test_safe() {$/;"	f
test_search	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_search(){$/;"	f
test_set_raw	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn test_set_raw() {$/;"	f
test_should_keep_alive	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/mod.rs	/^fn test_should_keep_alive() {$/;"	f
test_stack	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_stack() {$/;"	f
test_status_code	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/status.rs	/^    fn test_status_code() {$/;"	f
test_streaming_drop	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^    fn test_streaming_drop() {$/;"	f
test_streaming_end	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^    fn test_streaming_end() {$/;"	f
test_streaming_parser	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_streaming_parser() {$/;"	f
test_to_base64_basic	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^    fn test_to_base64_basic() {$/;"	f
test_to_base64_crlf_line_break	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^    fn test_to_base64_crlf_line_break() {$/;"	f
test_to_base64_empty_line_length	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^    fn test_to_base64_empty_line_length() {$/;"	f
test_to_base64_lf_line_break	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^    fn test_to_base64_lf_line_break() {$/;"	f
test_to_base64_padding	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^    fn test_to_base64_padding() {$/;"	f
test_to_base64_url_safe	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^    fn test_to_base64_url_safe() {$/;"	f
test_to_hex	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs	/^    pub fn test_to_hex() {$/;"	f
test_to_hex_all_bytes	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs	/^    pub fn test_to_hex_all_bytes() {$/;"	f
test_to_json	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_to_json() {$/;"	f
test_trailing_characters	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_trailing_characters() {$/;"	f
test_trailing_characters_streaming	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_trailing_characters_streaming() {$/;"	f
test_trailing_whitespace	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    fn test_trailing_whitespace() {$/;"	f
test_unexpected_token	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_unexpected_token() {$/;"	f
test_uri_display	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/uri.rs	/^fn test_uri_display() {$/;"	f
test_uri_fromstr	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/uri.rs	/^fn test_uri_fromstr() {$/;"	f
test_url_query	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/request.rs	/^    fn test_url_query() {$/;"	f
test_write_array	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_write_array() {$/;"	f
test_write_bool	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_write_bool() {$/;"	f
test_write_char	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_write_char() {$/;"	f
test_write_chunked	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn test_write_chunked() {$/;"	f
test_write_enum	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_write_enum() {$/;"	f
test_write_error_closes	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/request.rs	/^    fn test_write_error_closes() {$/;"	f
test_write_f64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_write_f64() {$/;"	f
test_write_i64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_write_i64() {$/;"	f
test_write_none	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_write_none() {$/;"	f
test_write_null	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_write_null() {$/;"	f
test_write_object	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_write_object() {$/;"	f
test_write_sized	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn test_write_sized() {$/;"	f
test_write_some	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_write_some() {$/;"	f
test_write_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn test_write_str() {$/;"	f
to_base64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^    fn to_base64(&self, config: Config) -> String {$/;"	f
to_base64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs	/^    fn to_base64(&self, config: Config) -> String;$/;"	f
to_cookie_jar	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/common/cookie.rs	/^    pub fn to_cookie_jar(&self, key: &[u8]) -> CookieJar<'static> {$/;"	f
to_hex	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs	/^    fn to_hex(&self) -> String {$/;"	f
to_hex	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs	/^    fn to_hex(&self) -> String;$/;"	f
to_json	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^            fn to_json(&self) -> Json { Json::I64(*self as i64) }$/;"	f
to_json	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^            fn to_json(&self) -> Json { Json::U64(*self as u64) }$/;"	f
to_json	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^            fn to_json(&self) -> Json {$/;"	f
to_json	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn to_json(&self) -> Json { (*self as f64).to_json() }$/;"	f
to_json	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn to_json(&self) -> Json { Json::Array(self.iter().map(|elt| elt.to_json()).collect()) }$/;"	f
to_json	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn to_json(&self) -> Json { Json::Boolean(*self) }$/;"	f
to_json	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn to_json(&self) -> Json { Json::Null }$/;"	f
to_json	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn to_json(&self) -> Json { Json::String((*self).clone()) }$/;"	f
to_json	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn to_json(&self) -> Json { Json::String(self.to_string()) }$/;"	f
to_json	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn to_json(&self) -> Json { self.clone() }$/;"	f
to_json	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn to_json(&self) -> Json {$/;"	f
to_json	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn to_json(&self) -> Json;$/;"	f
to_json_impl_i64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^macro_rules! to_json_impl_i64 {$/;"	d
to_json_impl_u64	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^macro_rules! to_json_impl_u64 {$/;"	d
to_u16	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/status.rs	/^    pub fn to_u16(&self) -> u16 {$/;"	f
todo	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/lib.rs	/^macro_rules! todo($/;"	d
top	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    pub fn top<'l>(&'l self) -> Option<StackElement<'l>> {$/;"	f
try_option	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/mod.rs	/^macro_rules! try_option($/;"	d
try_or_invalid	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^                            macro_rules! try_or_invalid {$/;"	d
try_parse	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn try_parse<'a>(headers: &'a mut [httparse::Header<'a>], buf: &'a [u8]) ->$/;"	f
try_parse	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn try_parse<'b>(headers: &'b mut [httparse::Header<'b>], buf: &'b [u8]) ->$/;"	f
try_parse	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^fn try_parse<R: Read, T: TryParse<Subject=I>, I>(rdr: &mut BufReader<R>) -> TryParseResult<I> {$/;"	f
try_return	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/examples/server.rs	/^macro_rules! try_return($/;"	d
try_split	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn try_split(&self) -> Result<Http2Stream<S>, io::Error> {$/;"	f
try_split	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    fn try_split(&self) -> Result<CloneableMockStream, io::Error> {$/;"	f
try_split	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    fn try_split(&self) -> Result<MockStream, io::Error> {$/;"	f
tuple	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs	/^macro_rules! tuple {$/;"	d
tuple_impl	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^macro_rules! tuple_impl {$/;"	d
typed	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/item.rs	/^    pub fn typed<H: Header + HeaderFormat + Any>(&self) -> Option<&H> {$/;"	f
typed_mut	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/internals/item.rs	/^    pub fn typed_mut<H: Header + HeaderFormat>(&mut self) -> Option<&mut H> {$/;"	f
unpack_event	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^fn unpack_event(ev_type: c_int, ev: &RawEvent, raw: bool) -> EventResult {$/;"	f
validate	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/status.rs	/^    fn validate(num: u16, status_code: StatusCode, default_code: StatusCode, reason: Option<&str>) {$/;"	f
value	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    pub fn value<H: Header + HeaderFormat>(&self) -> Option<&'a H> {$/;"	f
value_string	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^    pub fn value_string(&self) -> String {$/;"	f
visit_map	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/mod.rs	/^            fn visit_map<V>(&mut self, mut visitor: V) -> Result<Headers, V::Error>$/;"	f
weak	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/entity.rs	/^    pub fn weak(tag: String) -> EntityTag {$/;"	f
weak_eq	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/entity.rs	/^    pub fn weak_eq(&self, other: &EntityTag) -> bool {$/;"	f
weak_ne	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/header/shared/entity.rs	/^    pub fn weak_ne(&self, other: &EntityTag) -> bool {$/;"	f
width	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustbox-0.9.0/src/rustbox.rs	/^    pub fn width(&self) -> usize {$/;"	f
with_capacity	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/buffer.rs	/^    pub fn with_capacity(rdr: R, cap: usize) -> BufReader<R> {$/;"	f
with_cert_and_key	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^        pub fn with_cert_and_key<C, K>(cert: C, key: K) -> Result<Openssl, SslError>$/;"	f
with_client	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn with_client(client: SimpleClient<Http2Stream<S>>) -> Http2Message<S> {$/;"	f
with_connector	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    pub fn with_connector<C, S>(connector: C) -> Client$/;"	f
with_connector	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^    pub fn with_connector(config: Config, connector: C) -> Pool<C> {$/;"	f
with_connector	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/request.rs	/^    pub fn with_connector<C, S>(method: Method, url: Url, connector: &C)$/;"	f
with_connector	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    pub fn with_connector<C, S>(c: C) -> Http11Protocol$/;"	f
with_connector	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    pub fn with_connector(connector: C) -> Http2Protocol<C, S> {$/;"	f
with_input	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    pub fn with_input(input: &[u8]) -> MockStream {$/;"	f
with_listener	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    pub fn with_listener(listener: HttpListener, ssl: S) -> HttpsListener<S> {$/;"	f
with_message	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/request.rs	/^    pub fn with_message(method: Method, url: Url, message: Box<HttpMessage>)$/;"	f
with_message	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/response.rs	/^    pub fn with_message(url: Url, mut message: Box<HttpMessage>) -> ::Result<Response> {$/;"	f
with_pool_config	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    pub fn with_pool_config(config: pool::Config) -> Client {$/;"	f
with_protocol	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/mod.rs	/^    pub fn with_protocol<P: Protocol + Send + Sync + 'static>(protocol: P) -> Client {$/;"	f
with_responses	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    pub fn with_responses(mut responses: Vec<&[u8]>) -> MockStream {$/;"	f
with_stream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    pub fn with_stream(stream: Box<NetworkStream + Send>) -> Http11Message {$/;"	f
with_stream	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    pub fn with_stream(stream: MockStream) -> CloneableMockStream {$/;"	f
wrap_client	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^        fn wrap_client(&self, stream: HttpStream, host: &str) -> ::Result<Self::Stream> {$/;"	f
wrap_client	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn wrap_client(&self, stream: HttpStream, host: &str) -> ::Result<Self::Stream>;$/;"	f
wrap_server	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^        fn wrap_server(&self, stream: HttpStream) -> ::Result<Self::Stream> {$/;"	f
wrap_server	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn wrap_server(&self, stream: HttpStream) -> ::Result<Self::Stream>;$/;"	f
write	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/benches/client.rs	/^    fn write(&mut self, msg: &[u8]) -> io::Result<usize> {$/;"	f
write	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/pool.rs	/^    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	f
write	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/client/request.rs	/^    fn write(&mut self, msg: &[u8]) -> io::Result<usize> {$/;"	f
write	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	f
write	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn write(&mut self, msg: &[u8]) -> io::Result<usize> {$/;"	f
write	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h2.rs	/^    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	f
write	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/mock.rs	/^    fn write(&mut self, msg: &[u8]) -> io::Result<usize> {$/;"	f
write	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/net.rs	/^    fn write(&mut self, msg: &[u8]) -> io::Result<usize> {$/;"	f
write	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^    fn write(&mut self, msg: &[u8]) -> io::Result<usize> {$/;"	f
write_head	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/server/response.rs	/^    fn write_head(&mut self) -> io::Result<Body> {$/;"	f
write_str	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs	/^    fn write_str(&mut self, s: &str) -> fmt::Result {$/;"	f
writer_mut	/Users/200246/.cargo/registry/src/github.com-1ecc6299db9ec823/hyper-0.7.2/src/http/h1.rs	/^    fn writer_mut(&mut self) -> Option<&mut HttpWriter<BufWriter<Box<NetworkStream + Send>>>> {$/;"	f
